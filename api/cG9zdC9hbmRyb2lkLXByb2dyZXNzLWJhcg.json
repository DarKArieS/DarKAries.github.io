{"title":"比較酷炫的計量條","date":"2019-01-14T06:03:05.000Z","slug":"android-progress-bar","comments":true,"tags":["Android native"],"categories":["Android Note"],"updated":"2019-01-15T14:18:06.342Z","content":"<h1>比較酷炫的計量條</h1>\n<p>應用程式中，免不了需要進度條來顯示各種進度，像是下載進度、處理進度等。而遊戲中的計量條(例如血條)，在變化時更是需要輔以酷炫的動畫增進視覺效果。</p>\n<p>這篇文章會使用android SDK原生功能以及ProgressBar來製作隨著倒數計時器變化的計量條，並且在增減時間時有酷炫的動畫。</p>\n<p>預計會達到如下的效果：</p>\n<ul>\n<li>一般情形：</li>\n</ul>\n<div class=\"article-img\"><p><img src=\"https://i.imgur.com/ys9a4wW.gif\" alt=\"\"></p></div>\n<ul>\n<li>\n<p>時間增加：計量條閃爍，並且有像是格鬥遊戲扣血時的延遲動畫\n<img src=\"https://i.imgur.com/y1nU64V.gif\" alt=\"\"></p>\n</li>\n<li>\n<p>時間減少：倒扣時計量條黑色閃爍\n<img src=\"https://i.imgur.com/tPyiEIc.gif\" alt=\"\"></p>\n</li>\n</ul>\n<p>簡單的程式架構如下：</p>\n<p>![](https://i.imgur.com/UfGqUsA.png =300x150)</p>\n<ul>\n<li>\n<p>Activity/Fragment中的按鈕送出更改剩餘時間的訊息給Timer、同時送出播放動畫的請求給Animator</p>\n</li>\n<li>\n<p>Timer負責倒數計時，並要求Animator更新Progress Bar</p>\n</li>\n<li>\n<p>Progress Bar被Animator控制，顯示剩餘時間以及播放動畫</p>\n</li>\n</ul>\n<p>原始碼可以在<a href=\"https://github.com/DarKArieS/JettPuzzleGame2/tree/1.ProgressBar\" target=\"_blank\" rel=\"noopener\">這裡</a>找到</p>\n<h2>計量條外觀設置</h2>\n<p>原生提供的ProgressBar共有兩種繪製形式，一種是討厭的轉圈圈，我們需要的是另一種長條形的ProgressBar Horizontal。</p>\n<div class=\"article-img\"><p><img src=\"https://i.imgur.com/HKk4Ivu.gif\" alt=\"\"></p></div>\n<p>而ProgressBar又有分成計量型(Determinate)與無限<s>吃到飽</s>型(Indeterminate)，我們需要的是計量型來顯示進度。</p>\n<div class=\"article-img\"><p><img src=\"https://i.imgur.com/gUgv83C.gif\" alt=\"\"></p></div>\n<p>官方原生只有提供水平進度條。如果想使用圓形形式顯示進度，可以<a href=\"https://github.com/Hellobird/CircleSeekBar-For-Android\" target=\"_blank\" rel=\"noopener\">參考這裡</a>。</p>\n<p>原生的樣式有點細，讓我們重新設計ProgressBar的樣式。\n建立一個time_bar.xml，程式碼如下：\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/background\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"5dip\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#88000000\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/secondaryProgress\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">clip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"5dip\"</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:angle</span>=<span class=\"string\">\"270\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:centerColor</span>=<span class=\"string\">\"#C6B7FF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:centerY</span>=<span class=\"string\">\"0.75\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#C3B2FF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#B9A4FF\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">clip</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@android:id/progress\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">clip</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"5dip\"</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:angle</span>=<span class=\"string\">\"270\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:centerColor</span>=<span class=\"string\">\"#74EBFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:centerY</span>=<span class=\"string\">\"0.75\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#8EEFFF\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#57E8FF\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">clip</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>根據多方教學以及官方文檔，ProgressBar Drawable xml 必須為LayerDrawable，並包含三個部分：background(背景)、progress(主要進度條)、secondaryProgress(次要進度條)</p>\n<p>進度條顯示計量進度是由clipDrawable控制，因此progress以及SecondaryProgress必須包在clip tag中。</p>\n<p>值得注意的一點是，這邊的id形式為internal ID：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:id=&quot;@android:id/progress</span><br></pre></td></tr></table></figure></p>\n<p>，並非我們在layout xml中使用的ID：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:id=&quot;@+id/...</span><br></pre></td></tr></table></figure></p>\n<p>這類的id為android SDK已經事先定義好並用於SDK中的各個物件，無法隨意更改。</p>\n<p>要取得擁有該id的物件沒辦法依靠常用的getViewById，方法如下：\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> progressBarDrawable = (progressBar.progressDrawable <span class=\"keyword\">as</span> LayerDrawable)</span><br><span class=\"line\">        .findDrawableByLayerId(Resources.getSystem().getIdentifier(<span class=\"string\">\"progress\"</span>,<span class=\"string\">\"id\"</span>,<span class=\"string\">\"android\"</span>))</span><br></pre></td></tr></table></figure></p>\n<p>等會兒製作<a href=\"#1\">閃爍動畫</a>時會用上。</p>\n<p>最後，在layout xml中需要注意的內容如下：\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/timerProgressBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:progressDrawable</span>=<span class=\"string\">\"@drawable/time_bar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">style</span>=<span class=\"string\">\"@android:style/Widget.DeviceDefault.Light.ProgressBar.Horizontal\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2>計時器</h2>\n<p>寫一個timer class，內容如下：</p>\n<p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.os.Handler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GameTimer</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">var</span> timerBarController: GameTimer.TimerBarController)&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TimerBarController</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">timerOnUpdate</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">timesUp</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> secondsCount = <span class=\"number\">40f</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxTimeInSeconds = secondsCount</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isOnStart = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> stopTimer = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> timerThread: Thread</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> handlerUI = Handler()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> runnable: Runnable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startTimer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isOnStart)&#123;</span><br><span class=\"line\">            isOnStart = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">            timerThread = Thread&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(secondsCount&gt;=<span class=\"number\">0</span> &amp;&amp; !stopTimer)&#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">10</span>) <span class=\"comment\">// 0.01 second</span></span><br><span class=\"line\">                    secondsCount -= <span class=\"number\">0.01f</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!stopTimer)&#123;</span><br><span class=\"line\">                    handlerUI.post&#123;</span><br><span class=\"line\">                        timerBarController.timesUp()</span><br><span class=\"line\">                        stopTimer()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                println(<span class=\"string\">\"timer thread end\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            runnable = Runnable &#123;</span><br><span class=\"line\">                timerBarController.timerOnUpdate()</span><br><span class=\"line\">                handlerUI.postDelayed(runnable, <span class=\"number\">10</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            stopTimer = <span class=\"literal\">false</span></span><br><span class=\"line\">            timerThread.start()</span><br><span class=\"line\">            handlerUI.postDelayed(runnable, <span class=\"number\">10</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">stopTimer</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        stopTimer = <span class=\"literal\">true</span></span><br><span class=\"line\">        isOnStart = <span class=\"literal\">false</span></span><br><span class=\"line\">        handlerUI.removeCallbacks(runnable)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>當中設計了一個介面讓UI端程式實作計時器到期(<code>fun timesUp()</code>)以及更新UI(<code>fun timerOnUpdate()</code>)等事件。</p>\n<p>計時的處理由一個thread負責，每0.01秒會更新一次數值。更新UI的部分則丟到handlerUI處理。\n由於Thread並不建議被隨意地中止，因此在thread中由布林值<code>isOnStart</code>決定是否停止該計時器。</p>\n<p>實例化計時器時，可以依不同情形配合progressBar設置。\n像是這個樣子，同時設定計時器以及progressBar：\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setup timer</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> timeThreshold = <span class=\"number\">40f</span></span><br><span class=\"line\">timer = GameTimer(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">timer.secondsCount = timeThreshold</span><br><span class=\"line\">timer.maxTimeInSeconds = timeThreshold</span><br><span class=\"line\">rootView.timerProgressBar.max = (timeThreshold*<span class=\"number\">100</span>).toInt() <span class=\"comment\">// timer bar resolution: 0.01 second</span></span><br><span class=\"line\">rootView.timerProgressBar.progress = (timeThreshold*<span class=\"number\">100</span>).toInt()</span><br><span class=\"line\">rootView.timerProgressBar.secondaryProgress = (timeThreshold*<span class=\"number\">100</span>).toInt()</span><br></pre></td></tr></table></figure></p>\n<p>計時器最大值為40秒。由於每0.01秒會更新一次計時器，progressBar的最大值為<code>40*100</code>。\n每次計時器更新progressBar會使progress值減一，在<a href=\"#progressBarUI\">progressBar UI更新</a>會使用到這個特性。</p>\n<h2>延遲動畫</h2>\n<p>寫一個class，當中封裝了所需要用到的物件。\n這邊主要解釋程式的想法，不把整段都貼出來。\n有興趣的話請洽<a href=\"https://github.com/DarKArieS/JettPuzzleGame2/tree/1.ProgressBar\" target=\"_blank\" rel=\"noopener\">完整程式碼</a>:smiley:</p>\n<p>&lt;h3 id=&quot;progressBarUI&quot;&gt;progressBar UI更新&lt;/h3&gt;</p>\n<p>由於原生的計量條顯示是由clip level所設定，因此將遭到變更的progress值更新到畫面上是一瞬間的事。[^clipAnimation]</p>\n<p>[^clipAnimation]: Android API &gt; 24 提供了<code>setProgress(int progress, boolean animate)</code>這個方法來設定進度條更新的動畫，不過只能選擇開啟跟關閉，而且動畫的時間長度是固定的(80ms)。</p>\n<p>此處藉由控制progress值的增減時機來實現動畫效果。</p>\n<p>首先，timer中的<code>fun timerOnUpdate()</code>負責更新progressBar，執行的內容如下：</p>\n<p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">update</span><span class=\"params\">(progressIncrement: <span class=\"type\">Int</span>, trueProgress: <span class=\"type\">Int</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(isAnimatingUpdatingDelayed) progressBar.incrementProgressBy(progressIncrement)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> progressBar.progress = trueProgress</span><br><span class=\"line\">    progressBar.secondaryProgress = trueProgress</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>這段程式中第二進度條是同步跟著timer走，而當沒有播放動畫時，主進度條亦然。</p>\n<p>如果正在播放動畫，則由progressIncrement這個變數決定要增加或減少多少值，這個值取決於你的計時器以及progress的最大值如何設定。\n這邊所營造的效果為：在動畫途中，progress仍然會以計時器該有的速度遞減，而不會完全停下來。\n以此篇文章為例子，每0.01秒更新一次，每次更新progress的數值會減1，也就是<code>progressIncrement=-1</code>。</p>\n<h3>時間條增加時，延遲更新的動畫</h3>\n<p>先放上程式碼：</p>\n<p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">animateUpdatingDelayed</span><span class=\"params\">(delayTime: <span class=\"type\">Long</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isAnimatingUpdatingDelayed)&#123;</span><br><span class=\"line\">        isAnimatingUpdatingDelayed = <span class=\"literal\">true</span></span><br><span class=\"line\">        Thread&#123;</span><br><span class=\"line\">            Thread.sleep(delayTime)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">9</span>)&#123;</span><br><span class=\"line\">                progressBar.progress =</span><br><span class=\"line\">                        (progressBar.progress +</span><br><span class=\"line\">                                (progressBar.secondaryProgress - progressBar.progress)* i /<span class=\"number\">10</span>)</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">50</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            progressBar.progress = progressBar.secondaryProgress</span><br><span class=\"line\">            isAnimatingUpdatingDelayed = <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;.start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>設計思路是：開一個thread隨著時間一段一段更新progress的值。</p>\n<p>開頭有個布爾值規定一次只能存在一個延遲動畫用的thread，避免多個thread控制同個物件所造成的crash。</p>\n<p>在thread中，首先先等待一段時間，接下來將progress以及secondaryProgress之間的差值分成10等份依次更新，更新間隔為50 ms。\n由於先前的<code>fun update()</code>仍然會不停的被計時器呼叫，因此每次更新都必須重新計算一次。\n在thread運行中時，secondaryProgress是允許被改變的。在這段時間內再次按按鈕secondaryProgress會再度被更新，因次progress必須更快速的追上去。</p>\n<p>程式碼當中有些Magic number(例如分成10等份)，看官有興趣可以將這些數字包成一個功能 :yum:</p>\n<p>&lt;h2 id=&quot;1&quot;&gt;閃爍動畫&lt;/h2&gt;</p>\n<p>android中的View屬性動畫最基本的僅有移動、旋轉、縮放、淡入淡出，並沒有能改變已繪製物件「色調」的動畫。</p>\n<p>&lt;!-- Show個RPG製作大師改變色調的效果 --&gt;</p>\n<p>菜逼八的我想到這幾種策略：</p>\n<ul>\n<li>1.在欲閃爍的物件上再繪製一層一模一樣的物件，改變該物件的顏色並使用淡入淡出動畫</li>\n<li>2.在欲閃爍的物件上套上ColorFilter，隨著時間改變Filter的數值。</li>\n<li>3.製作一個客製化的View繼承自ProgressBar，該View再多繪製一層遮罩，並且對遮罩使用淡入淡出動畫。</li>\n</ul>\n<p>由於方案一似乎有點蠢，方案三我...還不會:sweat_smile:，在這裡我們使用方案二。</p>\n<p>先放上程式碼：</p>\n<p><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">progressShining</span><span class=\"params\">(isDarker:<span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>, shiningTime: <span class=\"type\">Long</span> = <span class=\"number\">1000</span>, shiningDegree: <span class=\"type\">Float</span> = <span class=\"number\">0.25</span>f)</span></span>&#123;</span><br><span class=\"line\">    animStepShining = <span class=\"number\">0</span></span><br><span class=\"line\">    mShiningTime = shiningTime/<span class=\"number\">20</span></span><br><span class=\"line\">    mShiningDegree = shiningDegree</span><br><span class=\"line\">    mIsDarker = isDarker</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isAnimatingShining)&#123;</span><br><span class=\"line\">        isAnimatingShining = <span class=\"literal\">true</span></span><br><span class=\"line\">        Thread&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(animStepShining&lt;animMaxStepShining)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> step : <span class=\"built_in\">Float</span> = <span class=\"keyword\">when</span>(mIsDarker)&#123;</span><br><span class=\"line\">                    <span class=\"literal\">true</span>-&gt; <span class=\"keyword\">when</span>(animMaxStepShining &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                        <span class=\"literal\">true</span> -&gt; <span class=\"number\">1</span> - (mShiningDegree * (animStepShining.toFloat())/<span class=\"number\">3</span>)</span><br><span class=\"line\">                        <span class=\"literal\">false</span> -&gt; <span class=\"number\">1</span> - mShiningDegree + (mShiningDegree * ((animStepShining-<span class=\"number\">3</span>).toFloat())/<span class=\"number\">17</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"literal\">false</span>-&gt; <span class=\"keyword\">when</span>(animMaxStepShining &lt; <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">                        <span class=\"literal\">true</span> -&gt; <span class=\"number\">1</span> + (mShiningDegree * (animStepShining.toFloat())/<span class=\"number\">3</span>)</span><br><span class=\"line\">                        <span class=\"literal\">false</span> -&gt; <span class=\"number\">1</span> + mShiningDegree - (mShiningDegree * ((animStepShining-<span class=\"number\">3</span>).toFloat())/<span class=\"number\">17</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> colorFilter = ColorMatrixColorFilter(</span><br><span class=\"line\">                    floatArrayOf(</span><br><span class=\"line\">                        <span class=\"number\">1f</span>*step,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>,</span><br><span class=\"line\">                        <span class=\"number\">0f</span>,<span class=\"number\">1f</span>*step,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>,</span><br><span class=\"line\">                        <span class=\"number\">0f</span>,<span class=\"number\">0f</span>,<span class=\"number\">1f</span>*step,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>,</span><br><span class=\"line\">                        <span class=\"number\">0f</span>,<span class=\"number\">0f</span>,<span class=\"number\">0f</span>,<span class=\"number\">1f</span>,<span class=\"number\">0f</span></span><br><span class=\"line\">                    )</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// To avoid thread conflicting OxO</span></span><br><span class=\"line\">                handlerUI.post&#123;progressBarDrawable.colorFilter = colorFilter&#125;</span><br><span class=\"line\">                animStepShining ++</span><br><span class=\"line\">                Thread.sleep(mShiningTime)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(animStepShining&gt;=animMaxStepShining)&#123;</span><br><span class=\"line\">                handlerUI.post&#123;progressBarDrawable.clearColorFilter()&#125;</span><br><span class=\"line\">                isAnimatingShining = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>設計思路雷同於延遲動畫，不過動畫分成兩段。\n以閃白光為例，由20次loop來呈現突然變亮之後漸漸轉暗的效果：變亮(3)-&gt;變暗(17)，而黑色閃爍則反過來。</p>\n<p>開頭三個變數是class的成員，寫在function外使得該他們可以在thread運行時被改變。同樣地，有個布爾值規定一次只能存在一個閃爍動畫用的thread。當在閃爍期間再次按下按鈕時，所有動畫進度相關的變數會被重置，再次播放全新的閃爍動畫。</p>\n<p>簡單的解釋一下ColorMatrix的運作原理。\n在Android drawable中，ColorFilter共分成三種：\nColorMatrixColorFilter、LightingColorFilter、PorterDuffColorFilter</p>\n<p>本篇使用的ColorMatrix必須配合以下公式轉換整個drawable的像素顏色：</p>\n<p>![](https://i.imgur.com/20YcKH6.png =300x200)</p>\n<p>以白光閃爍為例，不改變Alpha值，最亮的白色為<code>(R,G,B)=(1f,1f,1f)</code>[^first]，因此ColorMatrix設計成使得改變後的色彩為原色彩值一同乘上大於一的值，並依照動畫進程計算乘上的大小。而變暗則反過來乘上小於一的值。</p>\n<p>![](https://i.imgur.com/Bai5vHW.png =300x200)</p>\n<p>簡化成上面的式子，白光閃爍所用的值為R~R~=G~G~=B~B~&gt;1。</p>\n<p>如果想改成其他的閃爍顏色，只要調整R~R~ , G~G~, B~B~ 之間的比例就可以了。</p>\n<p>[^first]: 1f中的f代表浮點數的意思。使用整數表達則(R,G,B)=(255,255,255)(32bit 深度)</p>\n<p>而其他兩種不會用到的功能簡單地說：</p>\n<ul>\n<li>LightingColorFilter: ColorMatrix特定公式的版本，等同於我們變亮變暗所使用的式子再加上(R~C~,G~C~,B~C~)這一項</li>\n<li>PorterDuffColorFilter: 依照不同的模式將特定範圍的顏色替換。由於不曉得閃光顏色的漸變時所呈現的每一種顏色，故無法實現我們想要的效果。而顏色的alpha值只會讓原物件變成半透明，背景會透出來。</li>\n</ul>\n<p>較詳細的說明可以參考<a href=\"https://blog.csdn.net/allen315410/article/details/45059989\" target=\"_blank\" rel=\"noopener\">這一篇</a>。</p>\n<h2>結語</h2>\n<p>將以上兩種動畫結合起來即可呈現出文章開頭的動畫效果。\n方法老實說有點粗糙:confounded:，也許比較理想的方式是客製化的View，不過表現也算令人滿意(吧?)</p>\n<p>第一次寫文，請多指教 :smiley:</p>\n","next":{"title":"Markdown-it 渲染器測試","slug":"MarkDownItTest"},"link":"http://yoursite.com/post/android-progress-bar/"}