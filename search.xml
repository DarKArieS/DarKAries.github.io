<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>咖啡的故事 Ep.2： Reactive X 入門</title>
      <link href="/2019/06/06/reactiveXep1/"/>
      <url>/2019/06/06/reactiveXep1/</url>
      
        <content type="html"><![CDATA[<h1 id="intro"><a class="header-anchor" href="#intro">● </a>Intro</h1><p>剛開始處理非同步的問題時，想要自己寫一個可以完美處理各種 callback 的系統。雖然那時候已經知道有一套玩意兒叫 Rx ，但還是死撐著想自己寫。最後的結果當然是…寫出了一坨只有當下的自己才懂的東西。不過也學到用閉包處理 callback 以及用物件包裝 function 等等的…邪門歪道(?)。</p><p>最後在某人的大力推薦(?)下，還是回歸正途，來學學大家都在用的 ReactiveX 吧！</p><a id="more"></a><h1 id="reactive-programing"><a class="header-anchor" href="#reactive-programing">● </a>Reactive programing</h1><p>在學 Rx 之前，先來討論哲學問題。</p><p><s>想不到梗</s>，讓我們回到咖啡機的故事，並且請暫且忘掉<a href="https://darkaries.github.io/2019/05/15/androidDI/" target="_blank" rel="noopener">上一篇</a>。(根本沒人記得)</p><p>這次登場的角色是水跟加熱器。</p><p>在煮咖啡的流程中，我們需要熱水，產生熱水的流程如下：</p><blockquote><p>打開加熱器 -&gt; 水從加熱器獲得能量 -&gt; 水變熱了</p></blockquote><p>寫成程式看看：</p><h3 id="加熱器"><a class="header-anchor" href="#加熱器">● </a>加熱器</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heater</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> energy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">        energy = <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        energy = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getEnergy</span><span class="params">()</span></span> = energy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="咖啡機"><a class="header-anchor" href="#咖啡機">● </a>咖啡機</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> water: Water,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater: Heater,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump: Pump</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.on()</span><br><span class="line">        water.degree += heater.getEnergy()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咳，讓我們先忽略能量與溫度之間的轉換關係，就當作水有一公升這麼多，而且能量的單位是大卡吧。</p><p>看起來沒問題，執行起來也對。<br>但是有個小瑕疵：<strong>打開加熱器跟水變熱其實並沒有明確的因果關係</strong>。</p><p>會對的原因是因為程式<strong>剛好</strong>是一行一行往下執行的。</p><p>如果加熱器升溫是需要一段時間才能完成的呢？</p><p>聰明的你，看到這裡應該會想到同步異步的問題了，不過先別急。</p><hr><p>如果有一天，隔壁鄰居的小屁孩來你家玩，並且看上了你的咖啡機。<br>他是這樣子使用這臺咖啡機的：</p><blockquote><p>打開加熱器 -&gt; 關閉加熱器 -&gt; 打開加熱器 -&gt; 關閉加熱器 …</p></blockquote><p><s>第一時間當然是巴蕊。</s></p><p>程式會變這樣：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> water: Water,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater: Heater,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump: Pump</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">whatTheFuckingKid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.on()</span><br><span class="line">        water.degree += heater.getEnergy()</span><br><span class="line">        </span><br><span class="line">        heater.off()</span><br><span class="line">        water.degree = <span class="number">25</span> <span class="comment">//回到了常溫</span></span><br><span class="line">        </span><br><span class="line">        heater.on()</span><br><span class="line">        water.degree += heater.getEnergy()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次加熱器的狀態改變，我們都必須要手動的改變水的狀態，超麻煩的啦。</p><p>正常來說，應該是加熱器打開後水就會自己變熱才對啊！是水主動反應 (React) 了加熱器加熱這件事。</p><p>關於 Reactive programing 網路跟書上有各種不同的描述跟定義，看得眼花撩亂頭昏眼花。</p><p>也許這裡舉的例子可能也沒有非常精確，但是如果你問我，我會說是有明確描述 <strong>因為所以</strong> <s>蟑螂螞蟻</s> 的程式，並且把因果關係包裝起來，只要發生了 <strong>因為</strong> ，就一定會觸發 <strong>所以</strong>。</p><blockquote><p>因為 <strong>加熱器打開了</strong> 所以 <strong>水變熱</strong> 了。</p></blockquote><p>讓我們試著來寫寫看。</p><h2 id="observer-pattern"><a class="header-anchor" href="#observer-pattern">● </a>Observer pattern</h2><p>Reactive programing 的實作方式有百百種，想怎麼寫就怎麼寫。</p><p>為了承上啟下，結合之後要討論的 RxJava ，我們用<a href="https://en.wikipedia.org/wiki/Observer_pattern" target="_blank" rel="noopener">觀察者模式</a>來做。</p><p>在這個場景中，水觀察(訂閱)加熱器，加熱器通知水要變熱或變冷。水是觀察者 (Observer) ，加熱器是被觀察者 (Observable) 。</p><p>因為所以的關係為： 因為 被觀察者 做了某些事 所以 觀察者 做出了某些反應。</p><p>(有夠哲學的啦)</p><p>先來改造水，讓水有個方法可以主動反應「加熱」這件事。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Water</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> degree = <span class="number">25</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">beHeated</span><span class="params">(energy : <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">        degree += energy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來是加熱器，可以接受要被加熱的水，以及在打開之後「通知」目標變熱。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heater</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> energy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mToBeHeated : Water? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setToBeHeated</span><span class="params">(water:<span class="type">Water</span>)</span></span>&#123;</span><br><span class="line">        mToBeHeated = water</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">        energy = <span class="number">60</span></span><br><span class="line">        mToBeHeated?.beHeated(energy)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        energy = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 降溫，拜託不要吐槽 :p</span></span><br><span class="line">        mToBeHeated?.beHeated(-<span class="number">60</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getEnergy</span><span class="params">()</span></span> = energy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咖啡機會變這樣：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> water: Water,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater: Heater,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump: Pump</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">whatTheFuckingKid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.setToBeHeated(water)</span><br><span class="line">        heater.on()</span><br><span class="line">        heater.off()</span><br><span class="line">        heater.on()</span><br><span class="line">        heater.off()</span><br><span class="line">        heater.on()</span><br><span class="line">        heater.off()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="物件導向式的擴展"><a class="header-anchor" href="#物件導向式的擴展">● </a>物件導向式的擴展</h3><p>嗯…除了水以外好像也可以加熱其它東西啊！<br>來訂個規則吧！所有可以被加熱的東西都要遵守。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Heatable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">beHeated</span><span class="params">(energy : <span class="type">Int</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>水必須遵守這個規則：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Water</span> : <span class="type">Heatable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> degree = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beHeated</span><span class="params">(energy : <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">        degree += energy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>於是我們可以這樣用加熱器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加熱水</span></span><br><span class="line">heater.setToBeHeated(water)</span><br><span class="line">heater.on()</span><br><span class="line">......</span><br><span class="line"><span class="comment">//加熱牛奶，牛奶這個class該長什麼樣子由你決定 :D</span></span><br><span class="line">heater.setToBeHeated(milk)</span><br><span class="line">heater.on()</span><br><span class="line">...</span><br><span class="line"><span class="comment">//加熱不知道什麼東西，使用匿名物件</span></span><br><span class="line">heater.setToBeHeated(<span class="keyword">object</span>:Heatable&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beHeated</span><span class="params">(energy: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">//不知道會發生什麼事</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="函式導向式的擴展"><a class="header-anchor" href="#函式導向式的擴展">● </a>函式導向式的擴展</h3><p>仔細想一想，其實加熱器根本不用在乎到底什麼東西可以被加熱什麼東西不可以被加熱啊！它只需要做到讓加熱後的事情發生就可以了！</p><p>我們可以透過 Lambda function 來告訴加熱器在加熱之後會發生什麼事情。</p><p>於是加熱器變成這個樣子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heater</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> energy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> afterHeatedCallback : ((<span class="built_in">Int</span>)-&gt;<span class="built_in">Unit</span>)? = <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">afterHeated</span><span class="params">(callback : ((<span class="type">Int</span>)</span></span>-&gt;<span class="built_in">Unit</span>)):Heater&#123;</span><br><span class="line">        afterHeatedCallback = callback</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">        energy = <span class="number">50</span></span><br><span class="line">        afterHeatedCallback?.invoke(energy)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        energy = <span class="number">0</span></span><br><span class="line">        afterHeatedCallback?.invoke(-<span class="number">50</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getEnergy</span><span class="params">()</span></span> = energy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用加熱器時是這個樣子的，由於<code>afterHeated</code>方法會回傳類別自己，所以可以把命令串起來：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">heater.afterHeated &#123; energy-&gt;</span><br><span class="line">    water.beHeated(energy)</span><br><span class="line">&#125;.on()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><!-- 在這邊順帶一提，無論是物件導向式還是函數式擴展，都可以透過閉包 (closure) 機制來拿取屬於不同 scope 之中的值，來達到隨心所欲的境界！ --><h2 id="耗時操作"><a class="header-anchor" href="#耗時操作">● </a>耗時操作</h2><p>如果加熱器加熱水需要一段時間，該怎麼辦呢？<br>像是這個樣子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Thread&#123;</span><br><span class="line">        println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">        energy = <span class="number">50</span></span><br><span class="line">    &#125;.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於任務是由加熱器執行的而不是咖啡機，我們另開一條執行緒給它。</p><p>執行一下流程，原本的非reactive方法會立刻爆炸：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">heater.on()</span><br><span class="line"><span class="comment">//heater 還沒完成加熱就會馬上往下執行</span></span><br><span class="line">water.degree += heater.getEnergy()</span><br><span class="line"><span class="comment">//結果water的溫度還是沒有上去</span></span><br></pre></td></tr></table></figure><p>有了以上兩種擴展，處理這件事情就變得比較容易了！<br>加熱器長這樣，把設定好的物件方法/匿名函式拿進來用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Thread&#123;</span><br><span class="line">        println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">        energy = <span class="number">50</span></span><br><span class="line">        <span class="comment">//用匿名物件</span></span><br><span class="line">        mToBeHeated?.beHeated(energy)</span><br><span class="line">        <span class="comment">//或是用匿名函式：</span></span><br><span class="line">        <span class="comment">//afterHeatedCallback?.invoke(energy)</span></span><br><span class="line">    &#125;.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們只需要把後續發生的事情通通寫到匿名物件/匿名函式之中就可以了。藉由閉包 (closure) 機制，甚至可以隨意拿取屬於不同 scope 之中的成員，帥呀！</p><p>來看看程式碼會長什麼樣子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不小心放了個炸彈在這裡</span></span><br><span class="line">    <span class="comment">//這個炸彈所在的scope與 heater 不同</span></span><br><span class="line">    <span class="keyword">val</span> bomb = Bomb()</span><br><span class="line">    heater.setToBeHeated(<span class="keyword">object</span>:Heatable&#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beHeated</span><span class="params">(energy: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">// 藉由 closure 機制把 bomb 傳進來</span></span><br><span class="line">            <span class="comment">// 把加熱器打開炸彈會爆炸！</span></span><br><span class="line">            bomb.explode()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    heater.on() <span class="comment">// 開開看吧，嘿嘿...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reactive-stream"><a class="header-anchor" href="#reactive-stream">● </a>Reactive stream</h1><p>反應的問題處理好了，讓我們繼續關注咖啡該怎麼煮，總不能只是熱熱開水吧 :D</p><p>來複習(誤)一下煮咖啡的流程，以水的角度出發：</p><blockquote><p>水 -&gt; 加熱器打開 -&gt; 熱水 -&gt; 幫浦抽水沖咖啡 -&gt; 變成咖啡</p></blockquote><p>現在，水除了要對加熱器做出反應，同時也要對幫浦做反應了，水在此扮演了資料流 (stream) 的角色，被傳來傳去的。</p><p>用函式的方法做做看吧！</p><p>水</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Water</span> : <span class="type">Heatable&#123;</span></span></span><br><span class="line">    <span class="keyword">var</span> degree = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beHeated</span><span class="params">(energy : <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">        degree += energy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加熱器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heater</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> energy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> afterHeatedCallback : ((<span class="built_in">Int</span>)-&gt;<span class="built_in">Unit</span>)? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">afterHeated</span><span class="params">(callback : ((<span class="type">Int</span>)</span></span>-&gt;<span class="built_in">Unit</span>)):Heater&#123;</span><br><span class="line">        afterHeatedCallback = callback</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Thread&#123;</span><br><span class="line">            println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">            energy = <span class="number">60</span></span><br><span class="line">            afterHeatedCallback?.invoke(energy)</span><br><span class="line">        &#125;.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        energy = <span class="number">0</span></span><br><span class="line">        afterHeatedCallback?.invoke(-<span class="number">60</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getEnergy</span><span class="params">()</span></span> = energy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加兩個類別：幫浦以及咖啡</p><p>幫浦：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> afterPumpCallback : ((Coffee)-&gt;<span class="built_in">Unit</span>)? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">afterPump</span><span class="params">(callback : ((<span class="type">Coffee</span>)</span></span>-&gt;<span class="built_in">Unit</span>)):Pump&#123;</span><br><span class="line">        afterPumpCallback = callback</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pump</span><span class="params">(water:<span class="type">Water</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (water.degree &lt; <span class="number">85</span>)&#123;</span><br><span class="line">            println(<span class="string">"Degree of water is too low!"</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Thread&#123;</span><br><span class="line">                println(<span class="string">"=&gt; =&gt; pumping =&gt; =&gt;"</span>)</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">                <span class="keyword">val</span> coffee = Coffee()</span><br><span class="line">                afterPumpCallback?.invoke(coffee)</span><br><span class="line">            &#125;.start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咖啡，不解釋：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>那麼，該怎麼煮咖啡呢?</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> water: Water,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater: Heater,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump: Pump</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        pump.afterPump&#123; coffee-&gt;</span><br><span class="line">            println(<span class="string">" [_]P coffee! [_]P "</span>)</span><br><span class="line">            heater.off()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        heater.afterHeated &#123; energy-&gt;</span><br><span class="line">            water.beHeated(energy)</span><br><span class="line">            <span class="comment">// 由於降溫也會觸發這個函式，降溫的時候就不沖咖啡了！</span></span><br><span class="line">            <span class="keyword">if</span> (energy &gt; <span class="number">0</span>)</span><br><span class="line">                pump.pump(water)</span><br><span class="line">        &#125;.on()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哇啊，好像變倒敘法了。</p><p>當然，我們可以挪動一下程式碼，這不成問題。</p><p>糟糕的是，在這份程式碼中，總共使用了兩次<code>Thread{...}.start()</code>，開了兩個額外的執行緒。<br>如果為了不浪費計算資源，勢必得寫更多的程式來管理執行緒，光想就頭痛。</p><p>而且，並沒有妥善處理當加熱器或者幫浦不小心出事的例外情況。</p><p>這下子，該請大名鼎鼎的 ReactiveX 出來啦！</p><h1 id="reactivex"><a class="header-anchor" href="#reactivex">● </a>ReactiveX</h1><p>有關於 <a href="http://reactivex.io/" target="_blank" rel="noopener">ReactiveX</a> 這套程式，網路上可以找到相當多的簡介，就不在這裡再說一遍了。</p><p>它支援<s>多國語言</s>，不對，各式各樣的程式語言，我們寫 Kotlin 的人可以使用 <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a> 或是 <a href="https://github.com/ReactiveX/RxKotlin" target="_blank" rel="noopener">RxKotlin</a> 。兩者的差別在於 RxKotlin 支援了更多 Kotlin 的語法糖。</p><p>在這篇文章中我們先使用 RxJava 就好。</p><h2 id="dependency"><a class="header-anchor" href="#dependency">● </a>Dependency</h2><p>在 Android 的世界中有許多的套件可以直接與 RxJava 串接，例如 Retrofit 、 Room 、 LiveData 等等。</p><p>礙於篇幅，本篇將不會介紹這些東西。</p><p>在 Gradle 中添加：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"io.reactivex.rxjava2:rxjava:2.2.7"</span></span><br></pre></td></tr></table></figure><p>另外， RxJava 也提供了方便的接口來切換執行緒，在 Android 中請搭配 RxAndroid 使用。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'io.reactivex.rxjava2:rxandroid:2.1.1'</span></span><br></pre></td></tr></table></figure><p>這個 Library 中提供了 <code>AndroidSchedulers.mainThread()</code> 方法來直接拿取 Android 主執行緒，或是使用 Looper 等 Android 中特有的方法來處理執行緒。</p><h2 id="用看看吧"><a class="header-anchor" href="#用看看吧">● </a>用看看吧！</h2><p>在 RxJava 中，主要使用的組件有的觀察者 (Observer) 、被觀察者 (Observable) 以及操作子 (Operator) ，以及 Subject ，本篇會跳過 Subject 的部分。</p><p>首先先介紹最基本的冷觀察者組合。<br>所謂的冷觀察是指被觀察者在被觀察的時候才會做事，並將結果通知觀察者。有夠被動的有沒有呀。</p><h3 id="observer"><a class="header-anchor" href="#observer">● </a>Observer</h3><p>來看看 Observer 長什麼樣子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> observer = <span class="keyword">object</span>: Observer&lt;DataType&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSubscribe</span><span class="params">(d: <span class="type">Disposable</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNext</span><span class="params">(output: <span class="type">DataType</span>)</span></span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onComplete</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(e: <span class="type">Throwable</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;DataType&gt;</code> 中放入 Observable 與 Observer 之間用來傳輸資料的類別。</p><p>Observer 是個 abstract class，開了四個窗口，對應 Observable 傳來通知的四種狀況：</p><ul><li><p>onSubscribe:<br>在訂閱的瞬間會觸發的事件，傳入的 Disposable 可以用來解除此次的訂閱。</p></li><li><p>onNext:<br>Observable 完成階段性任務後將結果送過來，可以被觸發多次。</p></li><li><p>onComplete:<br>當 Observable 完成了所有任務之後觸發，到此訂閱關係完滿結束。</p></li><li><p>onError:<br>Observable 不小心出事了會觸發，必須小心地把 exception 接起來。</p></li></ul><h3 id="observable"><a class="header-anchor" href="#observable">● </a>Observable</h3><p>Observable 會透過 Creating Operator 來創造。<br>創建最簡單的 Observable 的方式就是使用 <code>Create</code> 這個 Operator 。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> observable = Observable.create&lt;DataType&gt;&#123; emitter-&gt;</span><br><span class="line">    <span class="comment">// 被觀察者做事情</span></span><br><span class="line">    emitter.onNext( ... )</span><br><span class="line">    <span class="comment">// 被觀察者做事情</span></span><br><span class="line">    emitter.onNext( ... )</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 被觀察者出包了</span></span><br><span class="line">    <span class="keyword">if</span> (...) emitter.onError(...)</span><br><span class="line">    ...</span><br><span class="line">    emitter.onComplete( ... )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Observable 中可以自由的放入各種邏輯運算，並在適當的時候把結果透過 emitter 傳遞出去。 Emitter 提供了 <code>onNext</code> 、 <code>onError</code> 、 <code>onComplete</code> 等方法，對應剛剛所提的 Observer 的其中三個方法。</p><h3 id="subscribe"><a class="header-anchor" href="#subscribe">● </a>Subscribe</h3><p>一鍵訂閱，順便解決掉線程問題！</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">observable</span><br><span class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// Observable在</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(observer)</span><br></pre></td></tr></table></figure><p>有個更簡潔的寫法！我們不做 observer 物件了，直接由 observable 所提供的方法來設定：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> disposable = observable</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(&#123; output-&gt;</span><br><span class="line">        <span class="comment">//onNext</span></span><br><span class="line">    &#125;,&#123; e-&gt;</span><br><span class="line">        <span class="comment">//onError</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>一口氣處理了 <code>onSubscribe</code> (使用這個方法最後會返回一個 Disposable 類別，也就是 <code>Observer.onSubscribe</code> 會收到的那一個)、 <code>onNext</code> 、 <code>onError</code>。</p><p>長的是不是跟剛剛寫過的煮咖啡程式有點像？</p><p>至於你說 <code>onComplete</code> ? Observable 中提供了一堆 <code>doOn...</code> 的方法，像是 <code>doOnComplete</code>，聰明如你，應該知道該怎麼做了吧！</p><p>不過使用 <code>doOn...</code> 這些方法請小心執行緒的問題，放在 <code>subscribeOn</code> 之後會在屬於 observable 的執行緒上跑，而放在 <code>observeOn</code> 則會在 observer 的執行緒上。</p><h3 id="operator"><a class="header-anchor" href="#operator">● </a>Operator</h3><p>操作子的目標對象為被觀察者 Observable ，藉由操作子可以將各式各樣的 Observable 串接成一條 Reactive Stream，讓資料流通過層層關卡，達成我們要的目的。</p><p>根據<a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">文件</a>， Operator 可以分成幾個類：</p><ul><li>Creating</li><li>Transforming</li><li>Filtering</li><li>Combining</li><li>Error Handling</li><li>…</li></ul><p>等等，也太多了吧？</p><p>沒關係，見一個學一個，讓我們繼續看下去。</p><h2 id="咖啡機-ver-rxjava"><a class="header-anchor" href="#咖啡機-ver-rxjava">● </a>咖啡機 ver. RxJava</h2><p>不囉嗦，上程式。</p><p>Heater 以及 Pump ， 被觀察者一族：</p><p>加熱器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Heater</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> energy = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span>: Observable&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.create&lt;<span class="built_in">Int</span>&gt; &#123;emitter-&gt;</span><br><span class="line">            println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">            energy = <span class="number">60</span></span><br><span class="line">            emitter.onNext(energy)</span><br><span class="line">            emitter.onComplete()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        energy = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getEnergy</span><span class="params">()</span></span> = energy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>幫浦</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pump</span><span class="params">(water:<span class="type">Water</span>)</span></span>:Observable&lt;Coffee&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.create&lt;Coffee&gt; &#123; emitter -&gt;</span><br><span class="line">            <span class="keyword">if</span> (water.degree &lt; <span class="number">85</span>)&#123;</span><br><span class="line">                emitter.onError(Throwable(<span class="string">"Degree of water is too low!"</span>))</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                println(<span class="string">"=&gt; =&gt; pumping =&gt; =&gt;"</span>)</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">                <span class="keyword">val</span> coffee = Coffee()</span><br><span class="line">                emitter.onNext(coffee)</span><br><span class="line">                emitter.onComplete()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>煮咖啡程式變成這樣，使用 <a href="http://reactivex.io/documentation/operators/flatmap.html" target="_blank" rel="noopener">flatMap</a> 算子把整個流程連接起來。</p><p>flapMap算子會提供上一個 Observable 的輸出，並要求返回一個 Observable ，型別隨需求決定。</p><p>最後長得像這樣：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> water: Water,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater: Heater,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump: Pump</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> disposable = CompositeDisposable()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">val</span> procedure = heater.on().flatMap &#123;energy-&gt;</span><br><span class="line">            water.beHeated(energy)</span><br><span class="line">            pump.pump(water)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        disposable.add(</span><br><span class="line">            procedure.subscribe &#123;coffee-&gt;</span><br><span class="line">                println(<span class="string">" [_]P coffee! [_]P "</span>)</span><br><span class="line">                heater.off()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        disposable.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>順便追加一個 <code>cancel</code> 方法，藉由 disposable 來取消任務。<br>現在就算咖啡煮到一半，我們也可以強制的將還沒跑完的流程中斷了！</p><p>是不是很簡單呢？</p><p>這段範例程式中並沒有把 <code>heater.off()</code> 後，水降溫的事件接進來，讀者可以自己試試看！</p><h1 id="outro"><a class="header-anchor" href="#outro">● </a>Outro</h1><p>雖然這邊僅舉一個例子，不過 Rx 的精髓在於搭配博大精深的 Operator 們可以做出千變萬化的組合。</p><p>另外，本篇沒有提及的是，Rx還能處理「背壓」的狀況，像是第一章所提及的小屁孩所做的行為：Observable 推送資料的速度大過於 Observer 消化資料的速度。</p><p>想知道更厲害的用法嗎？時間不早了，就讓我們改天有緣再相會吧。</p>]]></content>
      
      
      <categories>
          
          <category> Android Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android native </tag>
            
            <tag> ReactiveX </tag>
            
            <tag> RxJava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咖啡的故事： 依賴注入、Dagger、Android</title>
      <link href="/2019/05/15/androidDI/"/>
      <url>/2019/05/15/androidDI/</url>
      
        <content type="html"><![CDATA[<p><a href="https://drive.google.com/open?id=14P34DkHrt8KHfEYg-8EHOGk3P_cwSrt_" target="_blank" rel="noopener">簡報版</a></p><p>最近還是在閱讀一些 <a href="https://github.com/googlesamples/android-architecture-components" target="_blank" rel="noopener">Google Android 範例</a>，有個叫做 Dagger 的東西常常出現，讓人以為又要開始算Hermitian <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>H</mi><mrow><mo>†</mo></mrow></msup></mrow><annotation encoding="application/x-tex">H^{\dagger}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.849108em;"></span><span class="strut bottom" style="height:0.849108em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">†</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> 矩陣了。<br>該框架引入了一堆Annotation，看得頭昏眼花， Ctrl+B 追了半天什麼心得都沒有(誤)</p><p>好啦，亂扯一通。大家都知道 Dagger 在做的事情是依賴注入 (Dependency Injection, DI) ，那它到底在幹嘛？我們幹嘛要用它？</p><p>網路上關於DI的文章隨便抓都一大把，看得頭昏眼花。<br>為了避免自己放棄，乾脆自己來寫一篇，希望不會誤人子弟。</p><p>由於剛開始研究 Dagger 的時候是直接從 Android 專案中的範例開始的，殊不知， Dagger 為了迎合<br>Android App 的運行方式而用了一些<s>旁門左道</s>特別的方式來達成依賴注入，使上手難度又再提升一個檔次。</p><p>於是這篇文章先不從 Android App 的角度切入，有請 <a href="https://google.github.io/dagger/" target="_blank" rel="noopener">Dagger</a> 官方提供的 <a href="https://github.com/google/dagger/tree/master/examples/simple/src/main/java/coffee" target="_blank" rel="noopener">Coffemaker</a> 範例來現身說法先。</p><p>在這篇文中會使用 Kotlin 語言，<s>接地氣</s>，可以參考看看。</p><a id="more"></a><h1 id="dependency-依賴的故事"><a class="header-anchor" href="#dependency-依賴的故事">● </a>Dependency 依賴的故事</h1><h2 id="做一台咖啡機"><a class="header-anchor" href="#做一台咖啡機">● </a>做一台咖啡機</h2><p>現在我們有一台咖啡機 (CoffeeMaker) ，組成的零件有幫浦 (Pump) 、加熱計 (Heater)。</p><p>咖啡的製作流程如下：</p><ul><li>加熱器打開 (Heater on)</li><li>幫浦打水煮咖啡 (Pumping)</li><li>咖啡煮好了！</li><li>加熱器關掉 (Heater off)</li></ul><div id="flowchart-0" class="flow-chart"></div><p>首先，加熱器長這個樣子，我們選用了電子加熱器：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricHeater</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> heating = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isHot</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heating</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span> &#123;</span><br><span class="line">        heating = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">        heating = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著登場的是幫浦，是個虹吸裝置。<br>這個裝置有防呆功能，防止阿呆忘記加熱就打水。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span></span>(<span class="keyword">val</span> heater: ElectricHeater)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pump</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(heater.isHot())&#123;</span><br><span class="line">            println(<span class="string">"=&gt; =&gt; pumping =&gt; =&gt;"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>於是我們的咖啡機長這個樣子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffeemaker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater = ElectricHeater()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump = Thermosiphon(heater)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.on()</span><br><span class="line">        pump.pump()</span><br><span class="line">        println(<span class="string">" [_]P coffee! [_]P "</span>)</span><br><span class="line">        heater.off()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好，看起來沒什麼問題，故事結束了。</p><p>才不。</p><h2 id="依賴關係"><a class="header-anchor" href="#依賴關係">● </a>依賴關係</h2><p>讓我們來分析一下各個零件之間的關係。</p><!-- <div id="flowchart-1" class="flow-chart"></div>--><img src="https://i.imgur.com/MUoGB04.png" width="80%"><p>咖啡機依賴了幫浦跟加熱器，而幫浦又依賴於加熱器。加熱器沒有幫浦跟咖啡機也可以運作，但咖啡機和幫浦則不能沒有加熱器。</p><p>我們會說，咖啡機是個高層模組，依賴於低層模組的幫浦跟加熱器。</p><p>回過頭來看看 Coffeemaker 這個 class。當我們要製造 (實例化，Instantiate) 出一台咖啡機的時候，同時也會製造出新的幫浦跟加熱器，屬於一條龍服務。</p><p>這樣會有什麼問題呢?</p><ul><li><p>狀況一：某個收集咖啡機的愛好者想要擁有很多台咖啡機，但是不想要擁有很多的幫浦跟熱器。但是每一台咖啡機都自帶幫浦跟加熱器，浪費資源。</p></li><li><p>狀況二：廠商在研發咖啡機的時候，想要拿個假的加熱器跟幫浦來試試看咖啡製作流程有沒有錯誤。在一條龍服務下沒辦法在不動 Coffeemaker 配方 (程式碼) 的情況下完成。</p></li><li><p>狀況三：有一天，加熱器大改版，把on方法改成了open，咖啡機必須要配合加熱器跟著改版才能順利運作。</p></li><li><p>狀況四：有一天，歐盟心血來潮，端著反壟斷法來查水表，因為你的機器只接受電子加熱器。</p></li></ul><p>…</p><p>從軟體工程的角度來看，我們會說這些組件有著高<a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)" target="_blank" rel="noopener">相依性</a> (High dependency, high coupling) ，牽一髮而動全身，而且物件無法被重用 (Reuse) 。</p><p>好，那我們來改個設計，解決這些問題。</p><h2 id="解開依賴-decouple-依賴注入"><a class="header-anchor" href="#解開依賴-decouple-依賴注入">● </a>解開依賴 (Decouple) - 依賴注入</h2><p>首先解決狀況一，只要調整一下產線就可以了。</p><p>我們將幫浦跟加熱器委外生產，同時將咖啡機模組化。</p><p>現在我們的配方變成這樣：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffeemaker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater: ElectricHeater, </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump: Thermosiphon</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.on()</span><br><span class="line">        pump.pump()</span><br><span class="line">        println(<span class="string">" [_]P coffee! [_]P "</span>)</span><br><span class="line">        heater.off()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好，現在咖啡機收集狂可以只擁有一組加熱器跟幫浦，但擁有很多台咖啡機了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheManHavingManyCoffeemakers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> heater = ElectricHeater()</span><br><span class="line">    <span class="keyword">val</span> pump = Thermosiphon(heater)</span><br><span class="line">    <span class="keyword">val</span> cofeemaker1 = Coffeemaker(heater,pump)</span><br><span class="line">    <span class="keyword">val</span> cofeemaker2 = Coffeemaker(heater,pump)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們也可以設計成透過接口 (setter) 來獲得零件，這裡就不把程式碼秀出來了。</p><p>你有沒有發現，其實幫浦跟加熱器彼此之間早就是這種關係啦！如果幫浦跟加熱器組合是一條龍服務的話，我們的咖啡機就做不出來了呢。</p><p>如果有一天有個貪心的傢伙想做個有咖啡機功能的大機器也辦的到了。</p><h2 id="依賴反轉"><a class="header-anchor" href="#依賴反轉">● </a>依賴反轉</h2><p>然後來解決問題二三四。</p><p>生產咖啡機的廠商想了想，決定訂個標準規則 (interface) ，規定加熱器跟幫浦的規格，比如說必須要有哪些功能等等。具體如何實現這個功能則不在標準之內。<br>於是，咖啡機以及其他組件都必須按照這個標準來設計。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Heater</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">isHot</span><span class="params">()</span></span>:<span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pump</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">pump</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咖啡機配方變成這個樣子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffeemaker</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater: Heater, </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump: Pump</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.on()</span><br><span class="line">        pump.pump()</span><br><span class="line">        println(<span class="string">" [_]P coffee! [_]P "</span>)</span><br><span class="line">        heater.off()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這裡，所有的來自外部的零件必須符合規範，符合的規定 interface 。</p><p>讓我們來看看這樣如何解決問題。</p><p>現在有了這份標準，在測試的時候只要根據標準製作假的加熱器跟幫浦，便可以在不更動 Coffemaker 的情形下完成。</p><p>並且，任何廠商都可以生產幫浦跟加熱器，並將它用在咖啡機之中，不需要執著於電子加熱器。要換成<br>MagicHeater 也不成問題。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MagicHeater</span> : <span class="type">Heater &#123;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> heating = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isHot</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heating</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">off</span><span class="params">()</span></span> &#123;</span><br><span class="line">        heating = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">on</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"~ ~ ~ This is Magic ~ ~ ~"</span>)</span><br><span class="line">        println(<span class="string">"~ ~ ~ heating ~ ~ ~"</span>)</span><br><span class="line">        println(<span class="string">"~ ~ ~ magic ~ ~ ~"</span>)</span><br><span class="line">        heating = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而至於將 on 改成 open 這種改版，由於不符合規則，該廠商將會被業界淘汰。</p><p>看起來真不錯！</p><p>原本的狀況是，咖啡機必須要配合低層模組來設計。<br>現在的狀況則是高層模組以及低層模組都必須要配合 interface 來設計。</p><p>在軟體工程中，這種方式被稱作依賴反轉、相依性反轉、控制反轉 … 等等。</p><h2 id="降低成本-提高安全-誤"><a class="header-anchor" href="#降低成本-提高安全-誤">● </a>降低成本、提高安全 (誤)</h2><p><s>(標題要下什麼才好呀)</s></p><p>現在要製造咖啡機，我們最少要擁有三條供應鏈：生產咖啡機、生產幫浦、生產加熱器。<br>也就是說，每當在不同的地方要生出一台咖啡機時，我們也必須生出至少一組加熱器跟幫浦。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeopleInTainan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> heater = ElectricHeater()</span><br><span class="line">    <span class="keyword">val</span> pump = Thermosiphon(heater)</span><br><span class="line">    <span class="keyword">val</span> cofeemaker = Coffeemaker(heater,pump)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeopleInTaipei</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> heater = ElectricHeater()</span><br><span class="line">    <span class="keyword">val</span> pump = Thermosiphon(heater)</span><br><span class="line">    <span class="keyword">val</span> cofeemaker = Coffeemaker(heater,pump)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>好麻煩啊，一直寫重複的 code 稱不上是個好的工程師。<br>而且寫在建構子讓 Coffemaker 看起來很複雜，有沒有什麼更簡潔的方法？</p><p>更糟糕的是，幫浦跟加熱器暴露在外頭，使用者可以隨時取得它們，可以拿去做奇怪的事，例如拿去煮泡麵、燙他討厭的人。<br><s>(基德：廠商沒有跟你說微波爐不能拿來烘乾貓咪)</s></p><p>我們引入一臺專門的機器 (Injector/Container/…) ，這臺機器負責將咖啡機需要的加熱器以及幫浦生出來並安裝到位。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Injector</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater = ElectricHeater()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump = Thermosiphon(heater)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">provideHeater</span><span class="params">()</span></span> : Heater&#123;</span><br><span class="line">        <span class="keyword">return</span> heater</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">providePump</span><span class="params">()</span></span> : Pump&#123;</span><br><span class="line">        <span class="keyword">return</span> pump</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffeemaker</span></span>(injector:Injector)</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> heater = injector.provideHeater()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> pump = injector.providePump()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.on()</span><br><span class="line">        pump.pump()</span><br><span class="line">        println(<span class="string">" [_]P coffee! [_]P "</span>)</span><br><span class="line">        heater.off()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當咖啡機的依賴零件需要更換成其他廠商的零件或者是測試用的偽零件時，只要修改或換掉這臺機器就可以了。</p><p>有需要的話，也可以為這台機器定個規則 (interface)。</p><p>更進一步，還可以把整個製作流程打包起來。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMakerProvider</span></span>&#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">provideCoffeeMaker</span><span class="params">()</span></span> = Coffeemaker(Injector())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣一來，隨時隨地都可以取得一臺全新的咖啡機！而且內部組件也都被包裝起來不隨便給人用了。</p><p>而這些生成實體用的物件，還能視需求搭配單例模式來使用，使得每次提供的加熱器、幫浦或是 Injector 都是同一個，達到重用、節省運算資源。</p><p>註： 在這一章中， pump 與 heater 並沒有被解耦，而是一整組直接包進Injector中。需要的話我們可以如法炮製將 pump 與 heater 分開，程式會變得非常的長。</p><h1 id="dagger-依賴注入框架"><a class="header-anchor" href="#dagger-依賴注入框架">● </a>Dagger 依賴注入框架</h1><p>為了達到好擴充好維護好測試的目的，我們多寫了很多的程式碼，但自己寫的東西總是自己最明白。</p><p>有一天，一名新的工程師被聘進來，身為老鳥的我們必須費盡唇舌的解釋生產線如何運作。</p><p>有了依賴注入框架，我們只要把框架的文件丟給他就好了。</p><p>現在，來談談 Dagger 吧。</p><p>原本的 <a href="https://github.com/square/dagger/" target="_blank" rel="noopener">Dagger</a> 是由square公司所維護的專案，後來被 Google 接手，進化成 <a href="https://github.com/google/dagger" target="_blank" rel="noopener">Dagger2</a>。</p><p>我們選用的是 Dagger2 ，這個框架藉由註解 (annotation)，在編譯的時候自動產生代碼來完成依賴注入。</p><p>把 Dagger2 加入 Gradle 中吧！<br>在使用Kotlin的環境中， <a href="https://blog.jetbrains.com/kotlin/2015/06/better-annotation-processing-supporting-stubs-in-kapt/" target="_blank" rel="noopener">Kotlin 官方建議把註解解釋器 (annotation processor) 換成 kapt</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">    implementation <span class="string">'com.google.dagger:dagger:2.17'</span></span><br><span class="line">    kapt <span class="string">'com.google.dagger:dagger-compiler:2.17'</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="還是咖啡機的故事"><a class="header-anchor" href="#還是咖啡機的故事">● </a>還是咖啡機的故事</h2><h3 id="inject"><a class="header-anchor" href="#inject">● </a>Inject</h3><p>首先，我們改造一下需要依賴注入的幫浦以及咖啡機，把需要被注入的物件 (加熱器) 用 <code>@Inject</code> 標記起來。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> heater: Heater) : Pump &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pump</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(heater.isHot())&#123;</span><br><span class="line">            println(<span class="string">"=&gt; =&gt; pumping =&gt; =&gt;"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> heater: Heater, <span class="keyword">private</span> <span class="keyword">val</span> pump: Pump) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">brew</span><span class="params">()</span></span>&#123;</span><br><span class="line">        heater.on()</span><br><span class="line">        pump.pump()</span><br><span class="line">        println(<span class="string">" [_]P coffee! [_]P "</span>)</span><br><span class="line">        heater.off()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Dagger2中， <code>@Inject</code> 可以用來標記建構子、屬性、以及函式，這裡以標記建構子作為範例。</p><h3 id="module"><a class="header-anchor" href="#module">● </a>Module</h3><p>接下來建立 Module ，他的腳色相當於前一章 Injector 的腳色，負責產生零件實體。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module(includes = [PumpModule::class])</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMakerModule</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Provides</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">provideHeater</span><span class="params">()</span></span>:Heater&#123;</span><br><span class="line">       <span class="keyword">return</span> ElectricHeater()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PumpModule</span></span>&#123;</span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">providePump</span><span class="params">(pump: <span class="type">Thermosiphon</span>)</span></span>:Pump</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於 <code>Thermosiphon</code> 也依賴於 <code>Heater</code> ，因此幫浦的提供方法不使用 <code>@Provides</code> ，而是用 <code>@Binds</code> 將提供幫浦的方法以及我們選擇的幫浦實作類別 (Thermosiphon) 連結起來。<br>最後使用 <code>includes</code> 將兩個模組連結起來，Dagger會將同一個加熱器同時注入到咖啡機以及幫浦中。</p><h3 id="component"><a class="header-anchor" href="#component">● </a>Component</h3><p>最後則是產生咖啡機的一條龍產線 Component ，相當於前一章的 CoffeeMakerProvider 。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(modules = [CoffeeMakerModule::class])</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CoffeeComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">provideCoffeeMaker</span><span class="params">()</span></span> : CoffeeMaker</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我們只要告訴 Dagger 要使用的模組以及要產生的咖啡機類別就可以了。</p><h3 id="做咖啡囉"><a class="header-anchor" href="#做咖啡囉">● </a>做咖啡囉</h3><p>東西都準備好了之後， build 這個專案。 Dagger2 會根據這些註解以及介面，為我們產生相對應的程式碼實作。</p><p>讓我們試著做一台咖啡機，用這台咖啡機做一杯咖啡。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> coffeeProvider = DaggerCoffeeComponent.builder().build()</span><br><span class="line">    <span class="keyword">val</span> coffeeMaker = coffeeProvider.provideCoffeeMaker()</span><br><span class="line">    coffeeMaker.brew()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DaggerCoffeeComponent是程式碼產生器自動產生的類別。</p><p>執行結果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ ~ ~ heating ~ ~ ~</span><br><span class="line">=&gt; =&gt; pumping =&gt; =&gt;</span><br><span class="line"> [_]P coffee! [_]P</span><br></pre></td></tr></table></figure><h2 id="dagger2-in-android"><a class="header-anchor" href="#dagger2-in-android">● </a>Dagger2 in Android</h2><p>咖啡的故事結束了，我們把場景拉回 Android App。</p><p>由於 Android 中很多組件的實體是由 Android 系統掌控，我們沒辦法請框架幫我們產生已經注入好的 Activity 並交給 Android 調用。</p><p>後來，以下的追加套件就出現了：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">    implementation <span class="string">'com.google.dagger:dagger-android:2.17'</span></span><br><span class="line">    implementation <span class="string">'com.google.dagger:dagger-android-support:2.17'</span> <span class="comment">// if you use the support libraries</span></span><br><span class="line">    kapt <span class="string">'com.google.dagger:dagger-android-processor:2.17'</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這邊舉一個栗子。簡單的 Activity 注入範例 (我也還在學習中，也許改天會有個續篇吧…改天😶)</p><p>現在有一個 Activity ，需要一個 ViewModel工廠實體。工廠是什麼東西就先不在此討論。</p><h3 id="inject-v2"><a class="header-anchor" href="#inject-v2">● </a>Inject</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModelFactory: ViewModelFactory</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於 Activity 沒有建構子，因此在創造成員物件的時候注入需要的物件。</p><h3 id="module-v2"><a class="header-anchor" href="#module-v2">● </a>Module</h3><p>跟前一章的方法沒什麼太大的不同，使用ViewModelFactory的建構子來創造實體。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivityModule</span></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">provideViewModelFactory</span><span class="params">()</span></span> : ViewModelFactory&#123;</span><br><span class="line">        <span class="keyword">return</span> ViewModelFactory()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="component-v2"><a class="header-anchor" href="#component-v2">● </a>Component</h3><p>這裡必須要在定義 modules 時引入 dagger.android 中的組件，<code>AndroidInjectionModule</code> ：</p><p>而原本輸出已注入實體的方法變成了需要輸入 activity 的方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(modules = [</span></span><br><span class="line"><span class="meta">    MainActivityModule::class,</span></span><br><span class="line"><span class="meta">    AndroidInjectionModule::class</span></span><br><span class="line"><span class="meta">])</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MainActivityComponent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(activity:<span class="type">MainActivity</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="run"><a class="header-anchor" href="#run">● </a>Run</h3><p>設定完成，按下 Build 之後獲得 Dagger2 幫我們產生的類別 <code>DaggerMainActivityComponent</code> ，用它在 activity 的生命週期中 <strong>自己注入自己</strong> 。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> viewModelFactory: ViewModelFactory</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// inject what you need</span></span><br><span class="line">        DaggerMainActivityComponent.builder().build().inject(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個生命週期之後，標註 <code>@Inject</code> 的物件就會被注入，也就是說有實體可以用了。</p><h3 id="正確的注入姿勢"><a class="header-anchor" href="#正確的注入姿勢">● </a>正確的注入姿勢</h3><p>以上僅是做個簡單的注入處理。</p><p>官方提供的<a href="https://google.github.io/dagger/android" target="_blank" rel="noopener">教學</a>將注入端延伸到了 Application 類別來初始化。<br>有興趣的看官可以參考看看，看過以上的例子，應該會比較容易看得懂官方的作法。</p><!-- # Dagger 以外 --><h1 id="outro"><a class="header-anchor" href="#outro">● </a>Outro</h1><p>寫這篇文花了快一個星期的時間，過程中一直在懷疑流程到底對不對，這些的程式碼到底有沒有必要。</p><p>也許經驗不足就是會這個樣子。</p><p>Dagger2 還有很多其他的功能，像是傳遞生成實體所需要的參數、定 Scope 、設成單例、 MultiBinds 、blabla…，也許改天會有個續篇…改天😶</p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 開始e=>end: 結束op=>operation: 加熱器打開(Heater on)op2=>operation: 幫浦打水煮咖啡(Pumping)op3=>operation: 咖啡煮好了op4=>operation: 加熱器關掉(Heater off)cond=>condition: 加熱器是否打開st->op->cond->op2->op3->op4->econd(yes)->op2cond(no)->op1</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">op=>operation: 咖啡機(Coffeemaker)op2=>operation: 幫浦(Thermosiphon)op3=>operation: 加熱器(Electric Heater)op->op2->op3</textarea><textarea id="flowchart-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script>]]></content>
      
      
      <categories>
          
          <category> Android Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android native </tag>
            
            <tag> Dagger2 </tag>
            
            <tag> Dependency injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML Study Jam1:使用 BigQueryML預測計程車費率</title>
      <link href="/2019/05/13/gcpmljam1/"/>
      <url>/2019/05/13/gcpmljam1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://events.withgoogle.com/ml-study-jam-basic-tw/" target="_blank" rel="noopener">ML Study Jam</a></p><p><a href="https://google.qwiklabs.com/focuses/1797?parent=catalog" target="_blank" rel="noopener">Qwiklabs連結</a></p><p>前陣子<s>從入門到放棄</s>自學機器學習時就有耳聞 Google 推出了許多雲端工具，例如本篇會使用的 BigQuery 等等。</p><p>以前自學的時候看到類似的雲端工具時，總會覺得不知該從何處下手才好，最後便下意識地跳過😅</p><p>而 Google 最近為了推廣自家的 GCP 雲端平台，發起了 ML Study Jam ，提供免費的一個月線上學習平台 Qwiklabs 訂閱。這次主打的 Qwiklabs 項目會手把手教你如何使用 GCP 上的各項功能，不會涉及到太多機器學習技術探討。 Qwiklabs 會提供一個有時間及功能限制的 GCP 帳號供你練習。在教學中會有一些小關卡，當你在該帳號上完成時就可以過關。</p><p>這邊不會介紹 Qwiklabs 與 GCP 介面的基礎使用方式，還沒試過的同學可以先<a href="https://google.qwiklabs.com/quests/23" target="_blank" rel="noopener">來這裡看看</a>，第一個介紹 Qwiklabs 與 GCP 的 Hands-on lab 是免費的。</p><a id="more"></a><p>大部分圖片來自 Qwiklabs 。</p><h1 id="overview"><a class="header-anchor" href="#overview">● </a>Overview</h1><p><a href="https://cloud.google.com/bigquery/" target="_blank" rel="noopener">BigQuery</a>是 Google 推出的無伺服器企業資料倉儲服務，同時內建 <a href="https://cloud.google.com/bigquery/docs/bigqueryml-analyst-start" target="_blank" rel="noopener">BigQuery MachineLearning</a> 功能，可以直接在雲端上將資料用於 training 、 evaluation 、 prediction 等等。</p><p>這篇文章所參考的 Lab 將會使用 BigQuery 中的公開數據集—— New york city taxi cab 2015 來建立並評估模型，並用來預測計程車費。</p><h1 id="explore-dataset"><a class="header-anchor" href="#explore-dataset">● </a>Explore dataset</h1><p>在 GCP Console 中打開 BigQuery 頁面，長得像這個樣子：<br>左側選單找不到的同學可以從上方的搜尋欄輸入 BigQuery 。</p><img src="https://cdn.qwiklabs.com/vd3QNHGB4BAyHjAvOHw9qD0iqCPNaHAzY657z%2FGWLtY%3D" width="80%"><p>根據教學文件， BigQuery 使用相容 SQL 2011 standard 的 SQL 語法來操作數據，詳細的訊息可以參考<a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/" target="_blank" rel="noopener">文件</a>。對於之前沒用過 SQL 的人(我)來說，這個部分我覺得並不是太好上手，花了好幾天的時間研究。</p><p>在 Query editor 中輸入 SQL 指令後按下 Run 按鈕，系統會按照 SQL 指令將資料撈出來，並透過下方表格呈現結果。也可以試著用看看 Data Studio ，畫成圖表。</p><p>先來看看數據集中的數據長什麼樣子，像是每個月的 trips 總數量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#standardSQL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  TIMESTAMP_TRUNC(pickup_datetime,</span><br><span class="line">    <span class="keyword">MONTH</span>) <span class="keyword">month</span>,</span><br><span class="line">  <span class="keyword">COUNT</span>(*) trips</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="string">`bigquery-public-data.new_york.tlc_yellow_trips_2015`</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="number">1</span></span><br></pre></td></tr></table></figure><p>從程式碼中可以看出數據是來自 <code>bigquery-public-data.new_york.tlc_yellow_trips_2015</code> ，並使用 <a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions" target="_blank" rel="noopener">TIMESTAMP_TRUNC</a> 將時間戳轉為月份。</p><p>要瀏覽數據集的細節需要使用擁有 BigQuery 資源的帳號(這樣才可以計費啊XD)，例如 Qwiklabs 提供的帳號。這次用的數據集細節可以在 <a href="https://bigquery.cloud.google.com/table/nyc-tlc:yellow.trips?tab=preview" target="_blank" rel="noopener">Dataset Preview</a> 找到</p><p>想知道 BigQuery 的其他的公開數據集可以來 <a href="https://cloud.google.com/bigquery/public-data/" target="_blank" rel="noopener">BigQuery Public-Data</a> 找找。</p><p>等 Query 完成後，下方顯示結果為：</p><img src="https://cdn.qwiklabs.com/i3PmHY7jPV1XuAIql%2FDlkUHWFWuPJLcW1VECFP9P%2BuI%3D" width="30%"><p>每個月都有大約一千萬多筆的資料。</p><p>再來看看紐約的計程車司機在一天中不同的時間點上，跑得有多快：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#standardSQL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">EXTRACT</span>(<span class="keyword">HOUR</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">pickup_datetime) <span class="keyword">hour</span>,</span><br><span class="line">  <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(trip_distance / TIMESTAMP_DIFF(dropoff_datetime,</span><br><span class="line">        pickup_datetime,</span><br><span class="line">        <span class="keyword">SECOND</span>))*<span class="number">3600</span>, <span class="number">1</span>) speed</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="string">`bigquery-public-data.new_york.tlc_yellow_trips_2015`</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  trip_distance &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">AND</span> fare_amount/trip_distance <span class="keyword">BETWEEN</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">AND</span> <span class="number">10</span></span><br><span class="line">  <span class="keyword">AND</span> dropoff_datetime &gt; pickup_datetime</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="number">1</span></span><br></pre></td></tr></table></figure><p>這段程式藉由 <code>trip_distance</code> 、 <code>pickup_datetime</code> 、 <code>dropoff_datetime</code> 這三個欄位來計算出計程車的平均速率，並使用 ROUND 函數換成時速。<br>最後使用 <code>GROUP BY 1</code> ，根據第一欄 hour 來分群。</p><p>結果像是這個樣子，半夜凌晨大夥兒傾向飆車。</p><img src="https://cdn.qwiklabs.com/%2BF8Mj8HqPM9b8%2Fna1JYPy66xTKDcUu%2BQs1oh5Gy07A4%3D" width="10%"><h1 id="training-dataset"><a class="header-anchor" href="#training-dataset">● </a>Training dataset</h1><p>現在，我們想要試試以下欄位是否是好的 feature ，決定來 train 一發看看：</p><ul><li>Tolls Amount</li><li>Fare Amount</li><li>Hour of Day</li><li>Pick up address</li><li>Drop off address</li><li>Number of passengers</li></ul><p>我們必須把它們撈出來，並且做一些數據篩選，完整程式碼如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#standardSQL</span></span><br><span class="line"><span class="keyword">WITH</span> params <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">AS</span> TRAIN,</span><br><span class="line">    <span class="number">2</span> <span class="keyword">AS</span> EVAL</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">  daynames <span class="keyword">AS</span></span><br><span class="line">    (<span class="keyword">SELECT</span> [<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thurs'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>] <span class="keyword">AS</span> daysofweek),</span><br><span class="line"></span><br><span class="line">  taxitrips <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    (tolls_amount + fare_amount) <span class="keyword">AS</span> total_fare,</span><br><span class="line">    daysofweek[ORDINAL(<span class="keyword">EXTRACT</span>(<span class="keyword">DAYOFWEEK</span> <span class="keyword">FROM</span> pickup_datetime))] <span class="keyword">AS</span> <span class="keyword">dayofweek</span>,</span><br><span class="line">    <span class="keyword">EXTRACT</span>(<span class="keyword">HOUR</span> <span class="keyword">FROM</span> pickup_datetime) <span class="keyword">AS</span> hourofday,</span><br><span class="line">    pickup_longitude <span class="keyword">AS</span> pickuplon,</span><br><span class="line">    pickup_latitude <span class="keyword">AS</span> pickuplat,</span><br><span class="line">    dropoff_longitude <span class="keyword">AS</span> dropofflon,</span><br><span class="line">    dropoff_latitude <span class="keyword">AS</span> dropofflat,</span><br><span class="line">    passenger_count <span class="keyword">AS</span> passengers</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`nyc-tlc.yellow.trips`</span>, daynames, params</span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">    trip_distance &gt; <span class="number">0</span> <span class="keyword">AND</span> fare_amount &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">MOD</span>(<span class="keyword">ABS</span>(FARM_FINGERPRINT(<span class="keyword">CAST</span>(pickup_datetime <span class="keyword">AS</span> <span class="keyword">STRING</span>))),<span class="number">1000</span>) = params.TRAIN</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> taxitrips</span><br></pre></td></tr></table></figure><p>這一段使用 <code>WITH...AS...</code> 開了三個 SubQuery 。<br><code>params</code> 與 <code>daynames</code> 分別將 <code>TRAIN</code> 跟 星期 等「常數」定義好，而最後輸出的查詢則是由 <code>taxitrips</code> 負責。</p><p><code>params</code> ：</p><img src="https://i.imgur.com/mETjvTd.png" width="20%"><p><code>daynames</code> ：</p><img src="https://i.imgur.com/5asAu7S.png" width="15%"><p><code>taxitrips</code> ：</p><img src="https://cdn.qwiklabs.com/9%2FORyElhKMLalupP%2FuG%2BZqE%2FTjLX4XYCXnvsEmGLang%3D" width="70%"><p>在 <code>taxitrips</code> 這個查詢中，藉著 <code>WHERE</code> 來篩選資料：<br><code>trip_distance &gt; 0 AND fare_amount &gt; 0</code></p><p>並以以下條件來區分 Training Set 與 Validation Set :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOD(ABS(FARM_FINGERPRINT(CAST(pickup_datetime AS STRING))),1000) = params.TRAIN</span><br></pre></td></tr></table></figure><p>這裡使用了一個特別的 <a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/hash_functions" target="_blank" rel="noopener">FARM_FINGERPRINT</a> Hash 函數，可以把字串或位元組轉成長整數。</p><p>這個條件式運作方式為：<br>日期轉為字串 -&gt; 轉為長整數的絕對值 -&gt; 取除1000的餘數 -&gt; 判斷答案是否為params.TRAIN，也就是1。<br>根據教學文件，可以選出 1/1000 的數據來作為訓練集。</p><h1 id="train-model"><a class="header-anchor" href="#train-model">● </a>Train model</h1><h2 id="create-a-bigquery-dataset-to-store-models"><a class="header-anchor" href="#create-a-bigquery-dataset-to-store-models">● </a>Create a BigQuery dataset to store models</h2><p>在訓練之前，我們必須要開一個可以存放訓練好的 model 的空間。</p><p>在左邊的 BigQuery Resource 選單中，選擇最下方的 ProjectID ，使用 Qwiklabs 帳號的話看起來會像 <code>qwiklabs-gcp-xxx</code> 。</p><p>點選右下邊的 CREATE DATSET ，並取個名字，就叫 taxi 好了。</p><img src="https://cdn.qwiklabs.com/QGOFCQMb3UNnOf2dByXcmcH7%2BX6xwnoQFX0Fdo7fRLU%3D" width="70%"><p>好了之後點 Create dataset 就可以了。</p><h2 id="create-and-train-a-model"><a class="header-anchor" href="#create-and-train-a-model">● </a>Create and train a model</h2><p>先上 Query 程式碼：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#standardSQL</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">or</span> <span class="keyword">REPLACE</span> <span class="keyword">MODEL</span> taxi.taxifare_model</span><br><span class="line">OPTIONS</span><br><span class="line">  (model_type=<span class="string">'linear_reg'</span>, labels=[<span class="string">'total_fare'</span>]) <span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以下跟上一段的程式碼相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WITH</span> params <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">AS</span> TRAIN,</span><br><span class="line">    <span class="number">2</span> <span class="keyword">AS</span> EVAL</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">  daynames <span class="keyword">AS</span></span><br><span class="line">    (<span class="keyword">SELECT</span> [<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thurs'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>] <span class="keyword">AS</span> daysofweek),</span><br><span class="line"></span><br><span class="line">  taxitrips <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    (tolls_amount + fare_amount) <span class="keyword">AS</span> total_fare,</span><br><span class="line">    daysofweek[ORDINAL(<span class="keyword">EXTRACT</span>(<span class="keyword">DAYOFWEEK</span> <span class="keyword">FROM</span> pickup_datetime))] <span class="keyword">AS</span> <span class="keyword">dayofweek</span>,</span><br><span class="line">    <span class="keyword">EXTRACT</span>(<span class="keyword">HOUR</span> <span class="keyword">FROM</span> pickup_datetime) <span class="keyword">AS</span> hourofday,</span><br><span class="line">    pickup_longitude <span class="keyword">AS</span> pickuplon,</span><br><span class="line">    pickup_latitude <span class="keyword">AS</span> pickuplat,</span><br><span class="line">    dropoff_longitude <span class="keyword">AS</span> dropofflon,</span><br><span class="line">    dropoff_latitude <span class="keyword">AS</span> dropofflat,</span><br><span class="line">    passenger_count <span class="keyword">AS</span> passengers</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`nyc-tlc.yellow.trips`</span>, daynames, params</span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">    trip_distance &gt; <span class="number">0</span> <span class="keyword">AND</span> fare_amount &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">MOD</span>(<span class="keyword">ABS</span>(FARM_FINGERPRINT(<span class="keyword">CAST</span>(pickup_datetime <span class="keyword">AS</span> <span class="keyword">STRING</span>))),<span class="number">1000</span>) = params.TRAIN</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> taxitrips</span><br></pre></td></tr></table></figure><p>在這段程式碼中，我們創造了一個 model ： taxi.taxifare_model ，也就是隸屬於剛創建的 taxi 空間之下。<br>OPTIONS 指定了 model 的訓練方式以及想預測的目標。<br>BigQuery ML 目前只提供三種機器學習演算法，分別是 <code>linear_reg</code> 、 <code>logistic_reg</code> 以及 <code>kmeans</code> 。<br>在這個範例中我們預測的目標是個連續的數值，故線性回歸 <code>linear_reg</code> 符合我們的需求。<br>演算法本身也有各種的參數可以調整，更詳細的內容就交給 <a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create" target="_blank" rel="noopener">文檔</a> 來解決。</p><p>跑完後可以看到剛創建的 taxi 下面蹦出 <code>taxifare_model</code> 。</p><img src="https://cdn.qwiklabs.com/3e%2B%2Bn9FtlJ4zZDbP1edDClbadjTZmcifikRDzSbd3fA%3D" width="35%"><h1 id="evaluate-model-performance"><a class="header-anchor" href="#evaluate-model-performance">● </a>Evaluate model performance</h1><p>一樣先上 Query 程式碼：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#standardSQL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SQRT</span>(mean_squared_error) <span class="keyword">AS</span> rmse</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  ML.EVALUATE(<span class="keyword">MODEL</span> taxi.taxifare_model,</span><br><span class="line">  (</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此處與上上段程式碼雷同，但使用 params.EVAL 作為篩選條件，請看33行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">WITH</span> params <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">AS</span> TRAIN,</span><br><span class="line">    <span class="number">2</span> <span class="keyword">AS</span> EVAL</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">  daynames <span class="keyword">AS</span></span><br><span class="line">    (<span class="keyword">SELECT</span> [<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thurs'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>] <span class="keyword">AS</span> daysofweek),</span><br><span class="line"></span><br><span class="line">  taxitrips <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    (tolls_amount + fare_amount) <span class="keyword">AS</span> total_fare,</span><br><span class="line">    daysofweek[ORDINAL(<span class="keyword">EXTRACT</span>(<span class="keyword">DAYOFWEEK</span> <span class="keyword">FROM</span> pickup_datetime))] <span class="keyword">AS</span> <span class="keyword">dayofweek</span>,</span><br><span class="line">    <span class="keyword">EXTRACT</span>(<span class="keyword">HOUR</span> <span class="keyword">FROM</span> pickup_datetime) <span class="keyword">AS</span> hourofday,</span><br><span class="line">    pickup_longitude <span class="keyword">AS</span> pickuplon,</span><br><span class="line">    pickup_latitude <span class="keyword">AS</span> pickuplat,</span><br><span class="line">    dropoff_longitude <span class="keyword">AS</span> dropofflon,</span><br><span class="line">    dropoff_latitude <span class="keyword">AS</span> dropofflat,</span><br><span class="line">    passenger_count <span class="keyword">AS</span> passengers</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`nyc-tlc.yellow.trips`</span>, daynames, params</span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">    trip_distance &gt; <span class="number">0</span> <span class="keyword">AND</span> fare_amount &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">MOD</span>(<span class="keyword">ABS</span>(FARM_FINGERPRINT(<span class="keyword">CAST</span>(pickup_datetime <span class="keyword">AS</span> <span class="keyword">STRING</span>))),<span class="number">1000</span>) = params.EVAL</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> taxitrips</span><br><span class="line"></span><br><span class="line">  ))</span><br></pre></td></tr></table></figure><p>此段使用驗證集 <code>params.EVAL</code> 、 <a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-evaluate" target="_blank" rel="noopener">ML.EVALUATE</a> 函數計算推測與正確答案之間的 Root mean square error ，數值越小代表模型越準確。</p><p>結果來到 9.5 左右。</p><h1 id="prediction"><a class="header-anchor" href="#prediction">● </a>Prediction</h1><p>那來看看預測的數值吧！把上一段程式碼換成使用 <a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-predict" target="_blank" rel="noopener">ML.PREDICT</a> 函數就可以了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#standardSQL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  ML.PREDICT(<span class="keyword">MODEL</span> <span class="string">`taxi.taxifare_model`</span>,</span><br><span class="line">   (</span><br><span class="line"></span><br><span class="line"> <span class="keyword">WITH</span> params <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">AS</span> TRAIN,</span><br><span class="line">    <span class="number">2</span> <span class="keyword">AS</span> EVAL</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">  daynames <span class="keyword">AS</span></span><br><span class="line">    (<span class="keyword">SELECT</span> [<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thurs'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>] <span class="keyword">AS</span> daysofweek),</span><br><span class="line"></span><br><span class="line">  taxitrips <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    (tolls_amount + fare_amount) <span class="keyword">AS</span> total_fare,</span><br><span class="line">    daysofweek[ORDINAL(<span class="keyword">EXTRACT</span>(<span class="keyword">DAYOFWEEK</span> <span class="keyword">FROM</span> pickup_datetime))] <span class="keyword">AS</span> <span class="keyword">dayofweek</span>,</span><br><span class="line">    <span class="keyword">EXTRACT</span>(<span class="keyword">HOUR</span> <span class="keyword">FROM</span> pickup_datetime) <span class="keyword">AS</span> hourofday,</span><br><span class="line">    pickup_longitude <span class="keyword">AS</span> pickuplon,</span><br><span class="line">    pickup_latitude <span class="keyword">AS</span> pickuplat,</span><br><span class="line">    dropoff_longitude <span class="keyword">AS</span> dropofflon,</span><br><span class="line">    dropoff_latitude <span class="keyword">AS</span> dropofflat,</span><br><span class="line">    passenger_count <span class="keyword">AS</span> passengers</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`nyc-tlc.yellow.trips`</span>, daynames, params</span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">    trip_distance &gt; <span class="number">0</span> <span class="keyword">AND</span> fare_amount &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">MOD</span>(<span class="keyword">ABS</span>(FARM_FINGERPRINT(<span class="keyword">CAST</span>(pickup_datetime <span class="keyword">AS</span> <span class="keyword">STRING</span>))),<span class="number">1000</span>) = params.EVAL</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> taxitrips</span><br><span class="line"></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>輸出如下，預測的數值與真實數據看來有段差距：</p><img src="https://cdn.qwiklabs.com/vOie0YpofU3oI7zMJrG9OJT%2Bom89nokwCtceenccSc0%3D" width="80%"><h1 id="improving-the-model"><a class="header-anchor" href="#improving-the-model">● </a>Improving the model</h1><p>根據實驗結果，結果看起來並不是那麼優秀。</p><p>我們再觀察一次想預測的目標之一 －－ <code>fare_amount</code> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">COUNT</span>(fare_amount) <span class="keyword">AS</span> num_fares,</span><br><span class="line">  <span class="keyword">MIN</span>(fare_amount) <span class="keyword">AS</span> low_fare,</span><br><span class="line">  <span class="keyword">MAX</span>(fare_amount) <span class="keyword">AS</span> high_fare,</span><br><span class="line">  <span class="keyword">AVG</span>(fare_amount) <span class="keyword">AS</span> avg_fare,</span><br><span class="line">  <span class="keyword">STDDEV</span>(fare_amount) <span class="keyword">AS</span> <span class="keyword">stddev</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`nyc-tlc.yellow.trips`</span></span><br></pre></td></tr></table></figure><img src="https://cdn.qwiklabs.com/uX%2Fr9WrJRi7usPBEaElFe7gFgAMrm0Q3exGSbGCeV1I%3D" width="70%"><p>挖賽， Maximum 竟然衝到 503325 ，誰會花這麼多錢搭計程車啊?</p><p>我們必須要將這種奇怪的數據清掉！</p><p>… …</p><p>有書則長，無書則短。最後的篩選如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WHERE trip_distance &gt; 0 AND fare_amount BETWEEN 6 and 200</span><br><span class="line">    AND pickup_longitude &gt; -75 #limiting of the distance the taxis travel out</span><br><span class="line">    AND pickup_longitude &lt; -73</span><br><span class="line">    AND dropoff_longitude &gt; -75</span><br><span class="line">    AND dropoff_longitude &lt; -73</span><br><span class="line">    AND pickup_latitude &gt; 40</span><br><span class="line">    AND pickup_latitude &lt; 42</span><br><span class="line">    AND dropoff_latitude &gt; 40</span><br><span class="line">    AND dropoff_latitude &lt; 42</span><br></pre></td></tr></table></figure><p>再來 train 一發！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">MODEL</span> taxi.taxifare_model_2</span><br><span class="line">OPTIONS</span><br><span class="line">  (model_type=<span class="string">'linear_reg'</span>, labels=[<span class="string">'total_fare'</span>]) <span class="keyword">AS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WITH</span> params <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">    <span class="number">1</span> <span class="keyword">AS</span> TRAIN,</span><br><span class="line">    <span class="number">2</span> <span class="keyword">AS</span> EVAL</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">  daynames <span class="keyword">AS</span></span><br><span class="line">    (<span class="keyword">SELECT</span> [<span class="string">'Sun'</span>, <span class="string">'Mon'</span>, <span class="string">'Tues'</span>, <span class="string">'Wed'</span>, <span class="string">'Thurs'</span>, <span class="string">'Fri'</span>, <span class="string">'Sat'</span>] <span class="keyword">AS</span> daysofweek),</span><br><span class="line"></span><br><span class="line">  taxitrips <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    (tolls_amount + fare_amount) <span class="keyword">AS</span> total_fare,</span><br><span class="line">    daysofweek[ORDINAL(<span class="keyword">EXTRACT</span>(<span class="keyword">DAYOFWEEK</span> <span class="keyword">FROM</span> pickup_datetime))] <span class="keyword">AS</span> <span class="keyword">dayofweek</span>,</span><br><span class="line">    <span class="keyword">EXTRACT</span>(<span class="keyword">HOUR</span> <span class="keyword">FROM</span> pickup_datetime) <span class="keyword">AS</span> hourofday,</span><br><span class="line">    <span class="keyword">SQRT</span>(<span class="keyword">POW</span>((pickup_longitude - dropoff_longitude),<span class="number">2</span>) + <span class="keyword">POW</span>(( pickup_latitude - dropoff_latitude), <span class="number">2</span>)) <span class="keyword">as</span> dist, <span class="comment">#Euclidean distance between pickup and drop off</span></span><br><span class="line">    <span class="keyword">SQRT</span>(<span class="keyword">POW</span>((pickup_longitude - dropoff_longitude),<span class="number">2</span>)) <span class="keyword">as</span> longitude, <span class="comment">#Euclidean distance between pickup and drop off in longitude</span></span><br><span class="line">    <span class="keyword">SQRT</span>(<span class="keyword">POW</span>((pickup_latitude - dropoff_latitude), <span class="number">2</span>)) <span class="keyword">as</span> latitude, <span class="comment">#Euclidean distance between pickup and drop off in latitude</span></span><br><span class="line">    passenger_count <span class="keyword">AS</span> passengers</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    <span class="string">`nyc-tlc.yellow.trips`</span>, daynames, params</span><br><span class="line"><span class="keyword">WHERE</span> trip_distance &gt; <span class="number">0</span> <span class="keyword">AND</span> fare_amount <span class="keyword">BETWEEN</span> <span class="number">6</span> <span class="keyword">and</span> <span class="number">200</span></span><br><span class="line">    <span class="keyword">AND</span> pickup_longitude &gt; <span class="number">-75</span> <span class="comment">#limiting of the distance the taxis travel out</span></span><br><span class="line">    <span class="keyword">AND</span> pickup_longitude &lt; <span class="number">-73</span></span><br><span class="line">    <span class="keyword">AND</span> dropoff_longitude &gt; <span class="number">-75</span></span><br><span class="line">    <span class="keyword">AND</span> dropoff_longitude &lt; <span class="number">-73</span></span><br><span class="line">    <span class="keyword">AND</span> pickup_latitude &gt; <span class="number">40</span></span><br><span class="line">    <span class="keyword">AND</span> pickup_latitude &lt; <span class="number">42</span></span><br><span class="line">    <span class="keyword">AND</span> dropoff_latitude &gt; <span class="number">40</span></span><br><span class="line">    <span class="keyword">AND</span> dropoff_latitude &lt; <span class="number">42</span></span><br><span class="line">    <span class="keyword">AND</span> <span class="keyword">MOD</span>(<span class="keyword">ABS</span>(FARM_FINGERPRINT(<span class="keyword">CAST</span>(pickup_datetime <span class="keyword">AS</span> <span class="keyword">STRING</span>))),<span class="number">1000</span>) = params.TRAIN</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">SELECT</span> *</span><br><span class="line">  <span class="keyword">FROM</span> taxitrips</span><br></pre></td></tr></table></figure><p>驗證一下， RMSE 結果來到 5.1 左右，帥呀！</p><h1 id="outro"><a class="header-anchor" href="#outro">● </a>Outro</h1><p>身為一個好的機器學習工程師，要做的工作還有很多。<br>Qwiklabs 的教學就到此為止，一個小時的時限也過得差不多了！</p><p>以個人的觀點而言， BQML 能使用的功能似乎還是挺有限。<br>不過BQ的強項在於處理超大量的數據，要深入研究模型的話可以到 <a href="https://colab.research.google.com/" target="_blank" rel="noopener">Colab</a> 來看看。</p>]]></content>
      
      
      <categories>
          
          <category> Google Could Platform </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google Could Platform </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>執行緒安全 Double-checked Locking</title>
      <link href="/2019/04/18/double-check-locking/"/>
      <url>/2019/04/18/double-check-locking/</url>
      
        <content type="html"><![CDATA[<p>有一天，在Google提供的<a href="https://github.com/googlesamples/android-Notifications" target="_blank" rel="noopener">範例</a>中讀到一段程式碼，當下不是很理解為什麼要這樣寫。</p><p>這是一段關於懶人<s>丹利</s>單例生成實例的程式碼：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InboxStyleEmailAppData</span> <span class="keyword">extends</span> <span class="title">MockNotificationData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InboxStyleEmailAppData sInstance = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InboxStyleEmailAppData <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sInstance = getSync();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> InboxStyleEmailAppData <span class="title">getSync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sInstance = <span class="keyword">new</span> InboxStyleEmailAppData();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sInstance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完後覺得奇怪，產生實體只要靠getSync()就可以完成了，為什麼還要再加上一層getInstance()並且再次確認靜態成員是否為null ?</p><p>經過高人提示，關鍵字為雙重鎖，立刻餵狗。</p><h2 id="double-checked-locking"><a class="header-anchor" href="#double-checked-locking">● </a>Double-checked Locking</h2><p>然後發現自己其實以前有讀過<a href="https://blog.csdn.net/fly910905/article/details/79286680" target="_blank" rel="noopener">這一篇</a>，顯然沒有記到腦子裡。</p><p>根據<a href="https://en.wikipedia.org/wiki/Double-checked_locking" target="_blank" rel="noopener">Wiki</a>，確保線程安全的單例的確只需要getSync()來生成或取得實體就可以了。<br>synchronized關鍵字確保當兩個執行緒同時在實體尚未生成時使用該方法，不會同時生成兩個實體，使得其中一個執行緒拿不到正確的sInstance成員。</p><p>但是如果每次要獲取單例實體時都使用帶有synchronized關鍵字的方法，系統必須要重複執行上鎖/解鎖的程序。當單例實體已經被生成後，這個鎖就顯得很不必要，且會降低系統效能。因此在外層又再加上一層不帶synchronized的null check函式，當單例實體存在時就不會再經過上鎖/解鎖的程序了。</p><h2 id="一點點的缺陷"><a class="header-anchor" href="#一點點的缺陷">● </a>一點點的缺陷</h2><p>看起來萬無一失，但故事還沒完。</p><p>有一天，執行緒A呼叫了單例方法，他注意到了沒有單例實體，於是繼續呼叫getSync()來生成實體。<br>在執行緒A還在忙的時候，執行緒B來了。B發現A已經來過了，於是很放心的把單例拿出去用了。</p><p>糟糕的是，A其實這時候還沒有忙完，B拿到的是不成熟的，還沒做好的實體(partially constructed object)，於是B並沒辦法真正的使用它，只好躺在地上死給你看(Crash)。</p><p>以上的故事，根據編譯器、快取機制等等各種因素，並不一定每次都會發生。</p><h2 id="volatile-關鍵字"><a class="header-anchor" href="#volatile-關鍵字">● </a>volatile 關鍵字</h2><p>據說<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>在某個java版本以後，擴展了語意的volatile關鍵字加入了happens-before relationship的機制，可以解決這個問題。</p><p>volatile的原意為當每次要使用該變數時都會讀取當下的值，而不是使用快取的值。而happens-before relationship更進一步確立每次讀寫的順序，類似mutex的機制。</p><p>那要如何使用呢?<br>只要將sInstance宣告加入volatile就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> InboxStyleEmailAppData sInstance = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>另外還可以在函式中加入Local variable，來降低存取volatile物件的次數，據說可以提升25%的效能。</p><p>像是Wiki中舉的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Works with acquire/release semantics for volatile in Java 1.5 and later</span></span><br><span class="line"><span class="comment">// Broken under Java 1.4 and earlier semantics for volatile</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Helper helper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Helper localRef = helper;</span><br><span class="line">        <span class="keyword">if</span> (localRef == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                localRef = helper;</span><br><span class="line">                <span class="keyword">if</span> (localRef == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    helper = localRef = <span class="keyword">new</span> Helper();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> localRef;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other functions and members...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存取volatile成員只在第一次localRef賦值的時候發生。</p><p>volatile關鍵字的作用似乎在每個不同的語言有不同的功能，像是C語言就不同於Java。老實說，我讀了半天，除了C語言的volatile會強調移除編譯器最佳化的功能外，我還是沒辦法強烈的感受到java與c兩者之間的不同，也許要懂底層的實作才有辦法了解，不過先在此打住好了。</p><p>以上純屬看著維基嘴砲，並無實驗佐證。<br>有任何錯誤歡迎提出😃</p><h1 id="補充"><a class="header-anchor" href="#補充">● </a>補充</h1><p>在Google提供的<a href="https://github.com/googlesamples/android-architecture-components/blob/master/BasicRxJavaSampleKotlin/app/src/main/java/com/example/android/observability/persistence/UsersDatabase.kt" target="_blank" rel="noopener">範例</a>中看到使用Kotlin的寫法，可以跟上面比較一下。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Database(entities = arrayOf(User::class)</span>, version = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">userDao</span><span class="params">()</span></span>: UserDao</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Volatile</span> <span class="keyword">private</span> <span class="keyword">var</span> INSTANCE: UsersDatabase? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getInstance</span><span class="params">(context: <span class="type">Context</span>)</span></span>: UsersDatabase =</span><br><span class="line">                INSTANCE ?: synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    INSTANCE ?: buildDatabase(context).also &#123; INSTANCE = it &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">buildDatabase</span><span class="params">(context: <span class="type">Context</span>)</span></span> =</span><br><span class="line">                Room.databaseBuilder(context.applicationContext,</span><br><span class="line">                        UsersDatabase::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"Sample.db")</span></span></span><br><span class="line">                        .build()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>據說是J2SE 5.0，但要確切的版本得去翻oracle的Doc，先放棄好了。參見wiki: <a href="https://en.wikipedia.org/wiki/Double-checked_locking" target="_blank" rel="noopener">Double-checked_locking</a>、<a href="https://en.wikipedia.org/wiki/Volatile_(computer_programming)" target="_blank" rel="noopener">Volatile</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Design pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初試 AndroidX，解決 Didn&#39;t find class &quot;android.support.design.widget....&quot; 問題</title>
      <link href="/2019/03/19/NewToAndroidX/"/>
      <url>/2019/03/19/NewToAndroidX/</url>
      
        <content type="html"><![CDATA[<p>某次Android Studio更新<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>之後，偶然發現在創建新專案時多了個沒看過的選項：<br><code>Use AndroidX artifacts</code></p><img src="https://i.imgur.com/7yTBrJc.png" width="75%"><p>依官網的<a href="https://developer.android.com/jetpack/androidx" target="_blank" rel="noopener">說明</a>，這是個加強版的 <a href="https://developer.android.com/topic/libraries/support-library/index" target="_blank" rel="noopener">Android Support Library</a></p><p>勾勾看會發生什麼事吧！</p><a id="more"></a><h3 id="問題很快的就來了"><a class="header-anchor" href="#問題很快的就來了">● </a>問題很快的就來了！</h3><p>在調用某些物件後，在執行時期出現了找不到各種class的情況。(Build沒有問題)</p><p>例如，從IDE中拖個AppBarLayout出來，Build完成後執行，App Crash：</p><blockquote><p>Error inflating class android.support.design.widget.CoordinatorLayout<br>…<br>Didn’t find class “android.support.design.widget.CoordinatorLayout” on path: …</p></blockquote><p>欸？<br><code>android.support.design</code>不是應該很理所當然的已經加進Gradle了嗎？<br>打開app gradle file瞧瞧。</p><img src="https://i.imgur.com/ytuQRpJ.png" width="90%"><p>發現相關的Library都被換成帶有AndroidX關鍵字的版本。</p><p>仔細瞧瞧XML檔，發現IDE為你準備的物件仍舊來自於 <code>Andorid.Support.XXX</code> ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"192dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>那我們自己加吧！手動的把Android.support.xxx加進來了，問題仍舊存在，依然是可Build不可執行。</p><h3 id="解決方式"><a class="header-anchor" href="#解決方式">● </a>解決方式</h3><p>忙了一天，終於發現，只需要把xml內的物件依照<a href="https://developer.android.com/jetpack/androidx/migrate" target="_blank" rel="noopener">這個列表</a>替換就解決了。</p><p>期望之後Android Studio更新後能自動抓取對應的Library，不用再手動更改了！</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>寫這篇的時候使用的是Android Studio 3.3.2 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Android Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android App 避免螢幕鍵盤蓋住RecyclerView底部內容的方法</title>
      <link href="/2019/03/19/keyboardandLayout/"/>
      <url>/2019/03/19/keyboardandLayout/</url>
      
        <content type="html"><![CDATA[<p>最近以練功為目的寫了一個簡單的<a href="https://github.com/DarKArieS/ChatNow" target="_blank" rel="noopener">聊天室App</a>，遇到了一個跟彈出鍵盤有關的問題：如何不讓鍵盤遮住RecyclerView最底部的內容。</p><img src="https://i.imgur.com/x5Wh6Kx.gif" width="30%"><a id="more"></a><p>剛開始解決這個問題的思路是寫一個View繼承自editText View並改寫<code>onTouchEvent</code>內彈出鍵盤的方法。研究了下源碼後發現裡面所調用方法跟成員有不少是無法改寫的。</p><p>在網路上查了一下監聽螢幕鍵盤彈出的方法，最有效的方法為監聽Layout的改變。在屬於Layout的view中加入<code>LayouyChangeListener</code>，並在監聽內加入滑到最底部的方法。</p><p>對於每次都滑到最底部感到不滿意，於是改成Layout改變時自動滑動Layout的改變量，營造出內容隨著鍵盤被推起來的效果。<br>不過這個方法在滑到最底部的時候會有滑過頭的問題，而在ViewHolder大小為動態的情況下我們無法得知RecyclerView還有多少可以滑動，想了半天還是無法解決。</p><p>有一天，很偶然的，發現其實只要一行就可以解決這個問題。😒<br>在RecyclerView的LayoutManager中加入這一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layoutManager.stackFromEnd = true</span><br></pre></td></tr></table></figure><p>使得RecyclerView在生成的時候是以底部為基準。<br>當鍵盤推出時，為了不擋住最底部的View，自然就會跟著被推起來。</p><img src="https://i.imgur.com/iNluFyT.gif" width="30%"><p>讓我們緬懷那些已經失去的時光 😑</p>]]></content>
      
      
      <categories>
          
          <category> Android Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Lambda Function</title>
      <link href="/2019/03/04/C-LambdaFunction/"/>
      <url>/2019/03/04/C-LambdaFunction/</url>
      
        <content type="html"><![CDATA[<p>今天打開了久違的<a href="https://leetcode.com" target="_blank" rel="noopener">LeetCode</a>，用C++寫了題Easy。</p><p>寫完看了看別人的解，突然發現原來C++ 在C++11 也有了lambda function的寫法，寫一篇文以玆紀念。</p><p><a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="noopener">Reference</a></p><a id="more"></a><h2 id="基礎用法"><a class="header-anchor" href="#基礎用法">● </a>基礎用法</h2><p>最簡單的結構長得像這樣：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">return</span> x + y; &#125;</span><br></pre></td></tr></table></figure><p>在這裡三種括號都用上了，來看看它們都做了些什麼。</p><ul><li>(): Function傳入值</li><li>{}: Function主要功能</li><li>[]: Closure的傳值方式</li></ul><p>如果要規定function的return類型(例如返回int)，改寫成：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[](<span class="keyword">int</span> x, <span class="keyword">int</span> y)-&gt; <span class="keyword">int</span> &#123; <span class="keyword">int</span> z = x+y; <span class="keyword">return</span> z; &#125;</span><br></pre></td></tr></table></figure><p>稍微測試了一下，似乎還沒遇到非得指定return類型的情況。<br>有經驗的高人可以指點一下😛</p><p>把它當物件使用時要使用auto關鍵字宣告</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runLambda</span><span class="params">(<span class="keyword">int</span> (*f)(<span class="keyword">int</span>,<span class="keyword">int</span>), <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;f(x,y)&lt;&lt;<span class="built_in">endl</span>;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; someList(<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> y = [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">int</span> z = x+y; <span class="keyword">return</span> z; &#125;;</span><br><span class="line">A a;</span><br><span class="line">a.runLambda(y,<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="閉包-closure"><a class="header-anchor" href="#閉包-closure">● </a>閉包 (Closure)</h2><p>當Lambda function的功能會需要用到外部的變數時，必須將傳入function的方法事先在<code>[]</code>中設定好。<br>有以下幾種組合：</p><ul><li>[]：不使用閉包，如果內部有使用其他scope外的變數會報錯</li><li>[=]：全部使用傳值的方式</li><li>[&amp;]：全部使用傳址的方式</li><li>[x, &amp;y]：x變數用傳值，y變數用傳址，如果內部有使用其他未定義的scope外變數會報錯</li><li>[&amp;,x]：除了x使用傳值之外，其他使用傳址</li><li>[=,&amp;x]：除了x使用傳址之外，其他使用傳值</li></ul><p>看個範例就可以了解了，範例來自<a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="noopener">Reference</a>。</p><p>定義特定的值傳址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; someList;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::for_each(someList.begin(), someList.end(), [&amp;total](<span class="keyword">int</span> x) &#123;</span><br><span class="line">     total += x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; total;</span><br></pre></td></tr></table></figure><p>不定義特定的，全部都傳址：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; someList;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::for_each(someList.begin(), someList.end(), [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">    total += x;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; total;</span><br></pre></td></tr></table></figure><p>如果在物件裡使用，且function內容需要使用物件成員的內部成員，需要傳入this pointer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">runOp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> f = [<span class="keyword">this</span>]() &#123; <span class="keyword">int</span> z = <span class="keyword">this</span>-&gt;x+<span class="keyword">this</span>-&gt;y; <span class="keyword">return</span> z; &#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;f()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">A a;</span><br><span class="line">a.x=<span class="number">5</span>;</span><br><span class="line">a.y=<span class="number">10</span>;</span><br><span class="line">a.runOp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 原生計量條動畫設計</title>
      <link href="/2019/01/14/android-progress-bar/"/>
      <url>/2019/01/14/android-progress-bar/</url>
      
        <content type="html"><![CDATA[<p>應用程式中，免不了需要進度條來顯示各種進度，像是下載進度、處理進度等。而遊戲中的計量條(例如血條)，在變化時更是需要輔以酷炫的動畫增進視覺效果。</p><p>這篇文章會使用android SDK原生功能以及ProgressBar來製作隨著倒數計時器變化的計量條，並且在增減時間時有酷炫的動畫。</p><a id="more"></a><p>預計會達到如下的效果：</p><ul><li>一般情形：</li></ul><p><img src="https://i.imgur.com/ys9a4wW.gif" alt=""></p><ul><li><p>時間增加：計量條閃爍，並且有像是格鬥遊戲扣血時的延遲動畫<br><img src="https://i.imgur.com/y1nU64V.gif" alt=""></p></li><li><p>時間減少：倒扣時計量條黑色閃爍<br><img src="https://i.imgur.com/tPyiEIc.gif" alt=""></p></li></ul><p>簡單的程式架構如下：</p><p><img src="https://i.imgur.com/UfGqUsA.png" alt="" width="300" height="150"></p><ul><li><p>Activity/Fragment中的按鈕送出更改剩餘時間的訊息給Timer、同時送出播放動畫的請求給Animator</p></li><li><p>Timer負責倒數計時，並要求Animator更新Progress Bar</p></li><li><p>Progress Bar被Animator控制，顯示剩餘時間以及播放動畫</p></li></ul><p>原始碼可以在<a href="https://github.com/DarKArieS/JettPuzzleGame2/tree/1.ProgressBar" target="_blank" rel="noopener">這裡</a>找到</p><h2 id="計量條外觀設置"><a class="header-anchor" href="#計量條外觀設置">● </a>計量條外觀設置</h2><p>原生提供的ProgressBar共有兩種繪製形式，一種是討厭的轉圈圈，我們需要的是另一種長條形的ProgressBar Horizontal。</p><p><img src="https://i.imgur.com/HKk4Ivu.gif" alt=""></p><p>而ProgressBar又有分成計量型(Determinate)與無限<s>吃到飽</s>型(Indeterminate)，我們需要的是計量型來顯示進度。</p><p><img src="https://i.imgur.com/gUgv83C.gif" alt=""></p><p>官方原生只有提供水平進度條。如果想使用圓形形式顯示進度，可以<a href="https://github.com/Hellobird/CircleSeekBar-For-Android" target="_blank" rel="noopener">參考這裡</a>。</p><p>原生的樣式有點細，讓我們重新設計ProgressBar的樣式。<br>建立一個time_bar.xml，程式碼如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/background"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"5dip"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#88000000"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/secondaryProgress"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"5dip"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">"270"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">"#C6B7FF"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">"0.75"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">"#C3B2FF"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">"#B9A4FF"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@android:id/progress"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"5dip"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">gradient</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:angle</span>=<span class="string">"270"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerColor</span>=<span class="string">"#74EBFF"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:centerY</span>=<span class="string">"0.75"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:endColor</span>=<span class="string">"#8EEFFF"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:startColor</span>=<span class="string">"#57E8FF"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根據多方教學以及官方文檔，ProgressBar Drawable xml 必須為LayerDrawable，並包含三個部分：background(背景)、progress(主要進度條)、secondaryProgress(次要進度條)</p><p>進度條顯示計量進度是由clipDrawable控制，因此progress以及SecondaryProgress必須包在clip tag中。</p><p>值得注意的一點是，這邊的id形式為internal ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:id=&quot;@android:id/progress</span><br></pre></td></tr></table></figure><p>，並非我們在layout xml中使用的ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:id=&quot;@+id/...</span><br></pre></td></tr></table></figure><p>這類的id為android SDK已經事先定義好並用於SDK中的各個物件，無法隨意更改。</p><p>要取得擁有該id的物件沒辦法依靠常用的getViewById，方法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> progressBarDrawable = (progressBar.progressDrawable <span class="keyword">as</span> LayerDrawable)</span><br><span class="line">        .findDrawableByLayerId(Resources.getSystem().getIdentifier(<span class="string">"progress"</span>,<span class="string">"id"</span>,<span class="string">"android"</span>))</span><br></pre></td></tr></table></figure><p>等會兒製作<a href="#1">閃爍動畫</a>時會用上。</p><p>最後，在layout xml中需要注意的內容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/timerProgressBar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:progressDrawable</span>=<span class="string">"@drawable/time_bar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@android:style/Widget.DeviceDefault.Light.ProgressBar.Horizontal"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="計時器"><a class="header-anchor" href="#計時器">● </a>計時器</h2><p>寫一個timer class，內容如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Handler</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameTimer</span></span>(<span class="keyword">private</span> <span class="keyword">var</span> timerBarController: GameTimer.TimerBarController)&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">TimerBarController</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">timerOnUpdate</span><span class="params">()</span></span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">timesUp</span><span class="params">()</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> secondsCount = <span class="number">40f</span></span><br><span class="line">    <span class="keyword">var</span> maxTimeInSeconds = secondsCount</span><br><span class="line">    <span class="keyword">var</span> isOnStart = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> stopTimer = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> timerThread: Thread</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> handlerUI = Handler()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> runnable: Runnable</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">startTimer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isOnStart)&#123;</span><br><span class="line">            isOnStart = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">            timerThread = Thread&#123;</span><br><span class="line">                <span class="keyword">while</span>(secondsCount&gt;=<span class="number">0</span> &amp;&amp; !stopTimer)&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>) <span class="comment">// 0.01 second</span></span><br><span class="line">                    secondsCount -= <span class="number">0.01f</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!stopTimer)&#123;</span><br><span class="line">                    handlerUI.post&#123;</span><br><span class="line">                        timerBarController.timesUp()</span><br><span class="line">                        stopTimer()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                println(<span class="string">"timer thread end"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            runnable = Runnable &#123;</span><br><span class="line">                timerBarController.timerOnUpdate()</span><br><span class="line">                handlerUI.postDelayed(runnable, <span class="number">10</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stopTimer = <span class="literal">false</span></span><br><span class="line">            timerThread.start()</span><br><span class="line">            handlerUI.postDelayed(runnable, <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stopTimer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        stopTimer = <span class="literal">true</span></span><br><span class="line">        isOnStart = <span class="literal">false</span></span><br><span class="line">        handlerUI.removeCallbacks(runnable)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當中設計了一個介面讓UI端程式實作計時器到期(<code>fun timesUp()</code>)以及更新UI(<code>fun timerOnUpdate()</code>)等事件。</p><p>計時的處理由一個thread負責，每0.01秒會更新一次數值。更新UI的部分則丟到handlerUI處理。<br>由於Thread並不建議被隨意地中止，因此在thread中由布林值<code>isOnStart</code>決定是否停止該計時器。</p><p>實例化計時器時，可以依不同情形配合progressBar設置。<br>像是這個樣子，同時設定計時器以及progressBar：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setup timer</span></span><br><span class="line"><span class="keyword">val</span> timeThreshold = <span class="number">40f</span></span><br><span class="line">timer = GameTimer(<span class="keyword">this</span>)</span><br><span class="line">timer.secondsCount = timeThreshold</span><br><span class="line">timer.maxTimeInSeconds = timeThreshold</span><br><span class="line">rootView.timerProgressBar.max = (timeThreshold*<span class="number">100</span>).toInt() <span class="comment">// timer bar resolution: 0.01 second</span></span><br><span class="line">rootView.timerProgressBar.progress = (timeThreshold*<span class="number">100</span>).toInt()</span><br><span class="line">rootView.timerProgressBar.secondaryProgress = (timeThreshold*<span class="number">100</span>).toInt()</span><br></pre></td></tr></table></figure><p>計時器最大值為40秒。由於每0.01秒會更新一次計時器，progressBar的最大值為<code>40*100</code>。<br>每次計時器更新progressBar會使progress值減一，在<a href="#progressBarUI">progressBar UI更新</a>會使用到這個特性。</p><h2 id="延遲動畫"><a class="header-anchor" href="#延遲動畫">● </a>延遲動畫</h2><p>寫一個class，當中封裝了所需要用到的物件。<br>這邊主要解釋程式的想法，不把整段都貼出來。<br>有興趣的話請洽<a href="https://github.com/DarKArieS/JettPuzzleGame2/tree/1.ProgressBar" target="_blank" rel="noopener">完整程式碼</a>😃</p><h3 id="progressBarUI">progressBar UI更新</h3><p>由於原生的計量條顯示是由clip level所設定，因此將遭到變更的progress值更新到畫面上是一瞬間的事。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p>此處藉由控制progress值的增減時機來實現動畫效果。</p><p>首先，timer中的<code>fun timerOnUpdate()</code>負責更新progressBar，執行的內容如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(progressIncrement: <span class="type">Int</span>, trueProgress: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isAnimatingUpdatingDelayed) progressBar.incrementProgressBy(progressIncrement)</span><br><span class="line">    <span class="keyword">else</span> progressBar.progress = trueProgress</span><br><span class="line">    progressBar.secondaryProgress = trueProgress</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這段程式中第二進度條是同步跟著timer走，而當沒有播放動畫時，主進度條亦然。</p><p>如果正在播放動畫，則由progressIncrement這個變數決定要增加或減少多少值，這個值取決於你的計時器以及progress的最大值如何設定。<br>這邊所營造的效果為：在動畫途中，progress仍然會以計時器該有的速度遞減，而不會完全停下來。<br>以此篇文章為例子，每0.01秒更新一次，每次更新progress的數值會減1，也就是<code>progressIncrement=-1</code>。</p><h3 id="時間條增加時-延遲更新的動畫"><a class="header-anchor" href="#時間條增加時-延遲更新的動畫">● </a>時間條增加時，延遲更新的動畫</h3><p>先放上程式碼：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">animateUpdatingDelayed</span><span class="params">(delayTime: <span class="type">Long</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isAnimatingUpdatingDelayed)&#123;</span><br><span class="line">        isAnimatingUpdatingDelayed = <span class="literal">true</span></span><br><span class="line">        Thread&#123;</span><br><span class="line">            Thread.sleep(delayTime)</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">9</span>)&#123;</span><br><span class="line">                progressBar.progress =</span><br><span class="line">                        (progressBar.progress +</span><br><span class="line">                                (progressBar.secondaryProgress - progressBar.progress)* i /<span class="number">10</span>)</span><br><span class="line">                Thread.sleep(<span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            progressBar.progress = progressBar.secondaryProgress</span><br><span class="line">            isAnimatingUpdatingDelayed = <span class="literal">false</span></span><br><span class="line">        &#125;.start()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設計思路是：開一個thread隨著時間一段一段更新progress的值。</p><p>開頭有個布爾值規定一次只能存在一個延遲動畫用的thread，避免多個thread控制同個物件所造成的crash。</p><p>在thread中，首先先等待一段時間，接下來將progress以及secondaryProgress之間的差值分成10等份依次更新，更新間隔為50 ms。<br>由於先前的<code>fun update()</code>仍然會不停的被計時器呼叫，因此每次更新都必須重新計算一次。<br>在thread運行中時，secondaryProgress是允許被改變的。在這段時間內再次按按鈕secondaryProgress會再度被更新，因次progress必須更快速的追上去。</p><p>程式碼當中有些Magic number(例如分成10等份)，看官有興趣可以將這些數字包成一個功能 😋</p><h2 id="1">閃爍動畫</h2><p>android中的View屬性動畫最基本的僅有移動、旋轉、縮放、淡入淡出，並沒有能改變已繪製物件「色調」的動畫。</p><!-- Show個RPG製作大師改變色調的效果 --><p>菜逼八的我想到這幾種策略：</p><ul><li>1.在欲閃爍的物件上再繪製一層一模一樣的物件，改變該物件的顏色並使用淡入淡出動畫</li><li>2.在欲閃爍的物件上套上ColorFilter，隨著時間改變Filter的數值。</li><li>3.製作一個客製化的View繼承自ProgressBar，該View再多繪製一層遮罩，並且對遮罩使用淡入淡出動畫。</li></ul><p>由於方案一似乎有點蠢，方案三我…還不會😅，在這裡我們使用方案二。</p><p>先放上程式碼：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">progressShining</span><span class="params">(isDarker:<span class="type">Boolean</span> = <span class="literal">false</span>, shiningTime: <span class="type">Long</span> = <span class="number">1000</span>, shiningDegree: <span class="type">Float</span> = <span class="number">0.25</span>f)</span></span>&#123;</span><br><span class="line">    animStepShining = <span class="number">0</span></span><br><span class="line">    mShiningTime = shiningTime/<span class="number">20</span></span><br><span class="line">    mShiningDegree = shiningDegree</span><br><span class="line">    mIsDarker = isDarker</span><br><span class="line">    <span class="keyword">if</span>(!isAnimatingShining)&#123;</span><br><span class="line">        isAnimatingShining = <span class="literal">true</span></span><br><span class="line">        Thread&#123;</span><br><span class="line">            <span class="keyword">while</span>(animStepShining&lt;animMaxStepShining)&#123;</span><br><span class="line">                <span class="keyword">val</span> step : <span class="built_in">Float</span> = <span class="keyword">when</span>(mIsDarker)&#123;</span><br><span class="line">                    <span class="literal">true</span>-&gt; <span class="keyword">when</span>(animMaxStepShining &lt; <span class="number">3</span>)&#123;</span><br><span class="line">                        <span class="literal">true</span> -&gt; <span class="number">1</span> - (mShiningDegree * (animStepShining.toFloat())/<span class="number">3</span>)</span><br><span class="line">                        <span class="literal">false</span> -&gt; <span class="number">1</span> - mShiningDegree + (mShiningDegree * ((animStepShining-<span class="number">3</span>).toFloat())/<span class="number">17</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="literal">false</span>-&gt; <span class="keyword">when</span>(animMaxStepShining &lt; <span class="number">3</span>)&#123;</span><br><span class="line">                        <span class="literal">true</span> -&gt; <span class="number">1</span> + (mShiningDegree * (animStepShining.toFloat())/<span class="number">3</span>)</span><br><span class="line">                        <span class="literal">false</span> -&gt; <span class="number">1</span> + mShiningDegree - (mShiningDegree * ((animStepShining-<span class="number">3</span>).toFloat())/<span class="number">17</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">val</span> colorFilter = ColorMatrixColorFilter(</span><br><span class="line">                    floatArrayOf(</span><br><span class="line">                        <span class="number">1f</span>*step,<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">0f</span>,</span><br><span class="line">                        <span class="number">0f</span>,<span class="number">1f</span>*step,<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">0f</span>,</span><br><span class="line">                        <span class="number">0f</span>,<span class="number">0f</span>,<span class="number">1f</span>*step,<span class="number">0f</span>,<span class="number">0f</span>,</span><br><span class="line">                        <span class="number">0f</span>,<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">1f</span>,<span class="number">0f</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">// To avoid thread conflicting OxO</span></span><br><span class="line">                handlerUI.post&#123;progressBarDrawable.colorFilter = colorFilter&#125;</span><br><span class="line">                animStepShining ++</span><br><span class="line">                Thread.sleep(mShiningTime)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(animStepShining&gt;=animMaxStepShining)&#123;</span><br><span class="line">                handlerUI.post&#123;progressBarDrawable.clearColorFilter()&#125;</span><br><span class="line">                isAnimatingShining = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設計思路雷同於延遲動畫，不過動畫分成兩段。<br>以閃白光為例，由20次loop來呈現突然變亮之後漸漸轉暗的效果：變亮(3)-&gt;變暗(17)，而黑色閃爍則反過來。</p><p>開頭三個變數是class的成員，寫在function外使得該他們可以在thread運行時被改變。同樣地，有個布爾值規定一次只能存在一個閃爍動畫用的thread。當在閃爍期間再次按下按鈕時，所有動畫進度相關的變數會被重置，再次播放全新的閃爍動畫。</p><p>簡單的解釋一下ColorMatrix的運作原理。<br>在Android drawable中，ColorFilter共分成三種：<br>ColorMatrixColorFilter、LightingColorFilter、PorterDuffColorFilter</p><p>本篇使用的ColorMatrix必須配合以下公式轉換整個drawable的像素顏色：</p><p><img src="https://i.imgur.com/20YcKH6.png" alt="" width="300" height="200"></p><p>以白光閃爍為例，不改變Alpha值，最亮的白色為<code>(R,G,B)=(1f,1f,1f)</code><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，因此ColorMatrix設計成使得改變後的色彩為原色彩值一同乘上大於一的值，並依照動畫進程計算乘上的大小。而變暗則反過來乘上小於一的值。</p><p><img src="https://i.imgur.com/Bai5vHW.png" alt="" width="300" height="200"></p><p>簡化成上面的式子，白光閃爍所用的值為 R<sub>R</sub> = G<sub>G</sub> = B<sub>B</sub> &gt; 1。</p><p>如果想改成其他的閃爍顏色，只要調整 R<sub>R</sub> , G<sub>G</sub>, B<sub>B</sub> 之間的比例就可以了。</p><p>而其他兩種不會用到的功能簡單地說：</p><ul><li>LightingColorFilter: ColorMatrix特定公式的版本，等同於我們變亮變暗所使用的式子再加上(R<sub>C</sub>,G<sub>C</sub>,B<sub>C</sub>)這一項</li><li>PorterDuffColorFilter: 依照不同的模式將特定範圍的顏色替換。由於不曉得閃光顏色的漸變時所呈現的每一種顏色，故無法實現我們想要的效果。而顏色的alpha值只會讓原物件變成半透明，背景會透出來。</li></ul><p>較詳細的說明可以參考<a href="https://blog.csdn.net/allen315410/article/details/45059989" target="_blank" rel="noopener">這一篇</a>。</p><h2 id="結語"><a class="header-anchor" href="#結語">● </a>結語</h2><p>將以上兩種動畫結合起來即可呈現出文章開頭的動畫效果。<br>方法老實說有點粗糙😖，也許比較理想的方式是客製化的View，不過表現也算令人滿意(吧?)</p><p>第一次寫文，請多指教 😃</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Android API &gt; 24 提供了<code>setProgress(int progress, boolean animate)</code>這個方法來設定進度條更新的動畫，不過只能選擇開啟跟關閉，而且動畫的時間長度是固定的(80ms)。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>1f中的f代表浮點數的意思。使用整數表達則(R,G,B)=(255,255,255)(32bit 深度) <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Android Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown-it 渲染器測試</title>
      <link href="/2019/01/08/MarkDownItTest/"/>
      <url>/2019/01/08/MarkDownItTest/</url>
      
        <content type="html"><![CDATA[<p>按照Chris大的<a href="https://dwatow.github.io/2017/06-18-hexo/re-equip-hexo1/" target="_blank" rel="noopener">教學</a>改造了Hexo</p><p>現在來測試下效果，測試碼來自<a href="https://markdown-it.github.io/" target="_blank" rel="noopener">markdown-it</a></p><a id="more"></a><p>失效的部分：</p><h1 id="以下為測試碼"><a class="header-anchor" href="#以下為測試碼">● </a>以下為測試碼</h1><hr><p><strong>Advertisement :)</strong></p><ul><li><strong><a href="https://nodeca.github.io/pica/demo/" target="_blank" rel="noopener">pica</a></strong> - high quality and fast image<br>resize in browser.</li><li><strong><a href="https://github.com/nodeca/babelfish/" target="_blank" rel="noopener">babelfish</a></strong> - developer friendly<br>i18n with plurals support and easy syntax.</li></ul><p>You will like those projects!</p><hr><h1 id="h1-heading-8"><a class="header-anchor" href="#h1-heading-8">● </a>h1 Heading 8-)</h1><h2 id="h2-heading"><a class="header-anchor" href="#h2-heading">● </a>h2 Heading</h2><h3 id="h3-heading"><a class="header-anchor" href="#h3-heading">● </a>h3 Heading</h3><h4 id="h4-heading"><a class="header-anchor" href="#h4-heading">● </a>h4 Heading</h4><h5 id="h5-heading"><a class="header-anchor" href="#h5-heading">● </a>h5 Heading</h5><h6 id="h6-heading"><a class="header-anchor" href="#h6-heading">● </a>h6 Heading</h6><h2 id="horizontal-rules"><a class="header-anchor" href="#horizontal-rules">● </a>Horizontal Rules</h2><hr><hr><hr><h2 id="typographic-replacements"><a class="header-anchor" href="#typographic-replacements">● </a>Typographic replacements</h2><p>Enable typographer option to see result.</p><p>© © ® ® ™ ™ § § ±</p><p>test… test… test… test?.. test!..</p><p>!!! ??? ,  – —</p><p>“Smartypants, double quotes” and ‘single quotes’</p><h2 id="emphasis"><a class="header-anchor" href="#emphasis">● </a>Emphasis</h2><p><strong>This is bold text</strong></p><p><strong>This is bold text</strong></p><p><em>This is italic text</em></p><p><em>This is italic text</em></p><p><s>Strikethrough</s></p><h2 id="blockquotes"><a class="header-anchor" href="#blockquotes">● </a>Blockquotes</h2><blockquote><p>Blockquotes can also be nested…</p><blockquote><p>…by using additional greater-than signs right next to each other…</p><blockquote><p>…or with spaces between arrows.</p></blockquote></blockquote></blockquote><h2 id="lists"><a class="header-anchor" href="#lists">● </a>Lists</h2><p>Unordered</p><ul><li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li><li>Sub-lists are made by indenting 2 spaces:<ul><li>Marker character change forces new list start:<ul><li>Ac tristique libero volutpat at</li></ul><ul><li>Facilisis in pretium nisl aliquet</li></ul><ul><li>Nulla volutpat aliquam velit</li></ul></li></ul></li><li>Very easy!</li></ul><p>Ordered</p><ol><li><p>Lorem ipsum dolor sit amet</p></li><li><p>Consectetur adipiscing elit</p></li><li><p>Integer molestie lorem at massa</p></li><li><p>You can use sequential numbers…</p></li><li><p>…or keep all the numbers as <code>1.</code></p></li></ol><p>Start numbering with offset:</p><ol start="57"><li>foo</li><li>bar</li></ol><h2 id="code"><a class="header-anchor" href="#code">● </a>Code</h2><p>Inline <code>code</code></p><p>Indented code</p><pre><code>// Some commentsline 1 of codeline 2 of codeline 3 of code</code></pre><p>Block code “fences”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sample text here...</span><br></pre></td></tr></table></figure><p>Syntax highlighting</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bar++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><h2 id="tables"><a class="header-anchor" href="#tables">● </a>Tables</h2><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>path to data files to supply the data that will be passed into templates.</td></tr><tr><td>engine</td><td>engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td>ext</td><td>extension to be used for dest files.</td></tr></tbody></table><p>Right aligned columns</p><table><thead><tr><th style="text-align:right">Option</th><th style="text-align:right">Description</th></tr></thead><tbody><tr><td style="text-align:right">data</td><td style="text-align:right">path to data files to supply the data that will be passed into templates.</td></tr><tr><td style="text-align:right">engine</td><td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td style="text-align:right">ext</td><td style="text-align:right">extension to be used for dest files.</td></tr></tbody></table><h2 id="links"><a class="header-anchor" href="#links">● </a>Links</h2><p><a href="http://dev.nodeca.com" target="_blank" rel="noopener">link text</a></p><p><a href="http://nodeca.github.io/pica/demo/" title="title text!" target="_blank" rel="noopener">link with title</a></p><p>Autoconverted link <a href="https://github.com/nodeca/pica" target="_blank" rel="noopener">https://github.com/nodeca/pica</a> (enable linkify to see)</p><h2 id="images"><a class="header-anchor" href="#images">● </a>Images</h2><p><img src="https://octodex.github.com/images/minion.png" alt="Minion"><br><img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat"></p><p>Like links, Images also have a footnote style syntax</p><p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat"></p><p>With a reference later in the document defining the URL location:</p><h2 id="plugins"><a class="header-anchor" href="#plugins">● </a>Plugins</h2><p>The killer feature of <code>markdown-it</code> is very effective support of<br><a href="https://www.npmjs.org/browse/keyword/markdown-it-plugin" target="_blank" rel="noopener">syntax plugins</a>.</p><h3 id="emojies"><a class="header-anchor" href="#emojies">● </a><a href="https://github.com/markdown-it/markdown-it-emoji" target="_blank" rel="noopener">Emojies</a></h3><blockquote><p>Classic markup: 😉 :crush: 😢 :tear: 😆 😋</p><p>Shortcuts (emoticons): :-) :-( 8-) ;)</p></blockquote><p>see <a href="https://github.com/markdown-it/markdown-it-emoji#change-output" target="_blank" rel="noopener">how to change output</a> with twemoji.</p><h3 id="subscript-superscript"><a class="header-anchor" href="#subscript-superscript">● </a><a href="https://github.com/markdown-it/markdown-it-sub" target="_blank" rel="noopener">Subscript</a> / <a href="https://github.com/markdown-it/markdown-it-sup" target="_blank" rel="noopener">Superscript</a></h3><ul><li>19<sup>th</sup></li><li>H<sub>2</sub>O</li></ul><h3 id="ins"><a class="header-anchor" href="#ins">● </a><a href="https://github.com/markdown-it/markdown-it-ins" target="_blank" rel="noopener">&lt;ins&gt;</a></h3><p><ins>Inserted text</ins></p><h3 id="mark"><a class="header-anchor" href="#mark">● </a><a href="https://github.com/markdown-it/markdown-it-mark" target="_blank" rel="noopener">&lt;mark&gt;</a></h3><p><mark>Marked text</mark></p><h3 id="footnotes"><a class="header-anchor" href="#footnotes">● </a><a href="https://github.com/markdown-it/markdown-it-footnote" target="_blank" rel="noopener">Footnotes</a></h3><p>Footnote 1 link<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><p>Footnote 2 link<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p><p>Inline footnote<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> definition.</p><p>Duplicated footnote reference<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2:1]</a></sup>.</p><h3 id="definition-lists"><a class="header-anchor" href="#definition-lists">● </a><a href="https://github.com/markdown-it/markdown-it-deflist" target="_blank" rel="noopener">Definition lists</a></h3><dl><dt>Term 1</dt><dd><p>Definition 1<br>with lazy continuation.</p></dd><dt>Term 2 with <em>inline markup</em></dt><dd><p>Definition 2</p><pre><code>  { some code, part of Definition 2 }</code></pre><p>Third paragraph of definition 2.</p></dd></dl><p><em>Compact style:</em></p><dl><dt>Term 1</dt><dd>Definition 1</dd><dt>Term 2</dt><dd>Definition 2a</dd><dd>Definition 2b</dd></dl><h3 id="abbreviations"><a class="header-anchor" href="#abbreviations">● </a><a href="https://github.com/markdown-it/markdown-it-abbr" target="_blank" rel="noopener">Abbreviations</a></h3><p>This is <abbr title="Hyper Text Markup Language">HTML</abbr> abbreviation example.</p><p>It converts “<abbr title="Hyper Text Markup Language">HTML</abbr>”, but keep intact partial entries like “xxxHTMLyyy” and so on.</p><h3 id="custom-containers"><a class="header-anchor" href="#custom-containers">● </a><a href="https://github.com/markdown-it/markdown-it-container" target="_blank" rel="noopener">Custom containers</a></h3><div class="warning"><p><em>here be dragons</em></p></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Footnote <strong>can have markup</strong></p><p>and multiple paragraphs. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Footnote text. <a href="#fnref2" class="footnote-backref">↩︎</a> <a href="#fnref2:1" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Text of inline footnote <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HackMd 語法測試</title>
      <link href="/2019/01/08/HackMdTest/"/>
      <url>/2019/01/08/HackMdTest/</url>
      
        <content type="html"><![CDATA[<p>按照Chris大的<a href="https://dwatow.github.io/2017/06-18-hexo/re-equip-hexo1/" target="_blank" rel="noopener">教學</a>改造了Hexo</p><p>現在來測試下效果，測試碼來自<a href="https://hackmd.io/s/features-tw" target="_blank" rel="noopener">HackMd</a></p><a id="more"></a><p>失效的部分：</p><p>slideshare、speakerdeck、PDF、Font-Awesome icon<br>MahtJax、UML 圖表、警告區塊</p><p>程式碼區塊抓取有點問題，一定要換行<br><code>引用區塊標籤</code>失敗</p><p><code>接續上一個程式碼區塊的行號，使用 =+</code> 失敗</p><p>內部頁面用hashtag連結 <code>#title</code> ，跳轉會失敗(經過測試，是Theme的問題)</p><p>無痕模式下 imgur 圖床的圖片無法顯示</p><h1 id="以下為測試碼"><a class="header-anchor" href="#以下為測試碼">● </a>以下為測試碼</h1><h1 id="功能介紹"><a class="header-anchor" href="#功能介紹">● </a>功能介紹</h1><p><strong><a href="/features">English version</a></strong><br><strong><a href="/TKNuhom7S62OV6bDyBglXA">中文版</a></strong><br><strong><a href="/b_l4reliTdWOSn9SiCmbJQ">日本語版</a></strong></p><p><strong>請不要修改這份筆記</strong> 非常謝謝您 😄<br><strong>如果要說 嗨 或是 玩些東西，請至 <a href="/SA8inq7VTmO8jIWC5QsMcw">遊樂場</a></strong></p><h1 id="特賣會"><a class="header-anchor" href="#特賣會">● </a>特賣會</h1><p><strong>歡迎來自 Front-End Developers Taiwan 的各位！</strong>💯<br><strong>歡迎來自 g0v 的各位！</strong>👍<br><strong>歡迎來自 程式人雜誌 的各位！</strong>😃</p><h1 id="簡介"><a class="header-anchor" href="#簡介">● </a>簡介</h1><p><i class="fa fa-file-text"></i> <strong>HackMD</strong> 是個跨平台的 Markdown 即時協作筆記<br>所以您可以在<strong>電腦、平板甚至是手機</strong>與其他人做筆記！<br>同時也可以在 <strong><a href="/">首頁</a></strong> 透過 <strong>Facebook、Twitter、GitHub、Dropbox</strong> 登入</p><p>如有任何問題或是狀況，請至 <a href="https://github.com/hackmdio/hackmd-io-issues/issues/new" target="_blank" rel="noopener">GitHub</a> 回報問題<br>如果需要即時支援，請使用 <a href="https://www.messenger.com/t/hackmdio" target="_blank" rel="noopener">Facebook message</a><br><strong>謝謝您！</strong></p><h1 id="工作區"><a class="header-anchor" href="#工作區">● </a>工作區</h1><h2 id="模式"><a class="header-anchor" href="#模式">● </a>模式</h2><p><strong>電腦 &amp; 平板</strong></p><p><i class="fa fa-edit fa-fw"></i> 編輯：只看到編輯器<br><i class="fa fa-eye fa-fw"></i> 檢視：只看到結果<br><i class="fa fa-columns fa-fw"></i> 同時：同時看到兩邊</p><p><strong>手機</strong></p><p><i class="fa fa-toggle-on fa-fw"></i> 檢視：只看到結果<br><i class="fa fa-toggle-off fa-fw"></i> 編輯：只看到編輯器</p><h2 id="上傳圖片"><a class="header-anchor" href="#上傳圖片">● </a>上傳圖片</h2><p>只要按下這個按鈕 <i class="fa fa-camera"></i><br>或是 <strong>拖放</strong> 圖片到編輯器，甚至 <strong>貼上</strong> 圖片也可以喔！<br>這會自動上傳圖片至 <strong><a href="http://imgur.com" target="_blank" rel="noopener">imgur</a></strong>，啥都不必煩惱了 🎉<br><img src="https://i.imgur.com/9cgQVqD.png" alt=""></p><h2 id="分享筆記"><a class="header-anchor" href="#分享筆記">● </a>分享筆記</h2><p>如果您想分享 <strong>可編輯的</strong> 筆記，複製這份文件的網址就好<br>如果您想分享 <strong>只可讀的</strong> 筆記，按下這個按鈕 <i class="fa fa-share-alt"></i> 然後複製網址</p><h2 id="儲存"><a class="header-anchor" href="#儲存">● </a>儲存</h2><p>目前可以儲存至 <strong>Dropbox</strong> <i class="fa fa-dropbox"></i> 或是存放 <strong>.md</strong> <i class="fa fa-file-text"></i> 到您的本機</p><h2 id="匯入"><a class="header-anchor" href="#匯入">● </a>匯入</h2><p>就像上面的儲存功能，您可以從 <strong>Dropbox</strong> <i class="fa fa-dropbox"></i> 匯入 <strong>.md</strong> <i class="fa fa-file-text"></i><br>或是從 <strong>剪貼簿</strong> <i class="fa fa-clipboard"></i> 匯入，而且這可以轉換 <strong>html</strong> 喔 😃</p><h2 id="權限"><a class="header-anchor" href="#權限">● </a>權限</h2><p>檢視右上方有個小按鈕可以修改筆記權限，目前有六種選項：</p><table><thead><tr><th style="text-align:left"></th><th style="text-align:center">擁有者 可讀/寫</th><th style="text-align:center">已登入者 可讀</th><th style="text-align:center">已登入者 可寫</th><th style="text-align:center">訪客 可讀</th><th style="text-align:center">訪客 可寫</th></tr></thead><tbody><tr><td style="text-align:left"><span class="text-nowrap"><i class="fa fa-leaf fa-fw"></i> <strong>Freely</strong></span></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td></tr><tr><td style="text-align:left"><span class="text-nowrap"><i class="fa fa-pencil fa-fw"></i> <strong>Editable</strong></span></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:left"><span class="text-nowrap"><i class="fa fa-id-card fa-fw"></i> <strong>Limited</strong></span></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:left"><span class="text-nowrap"><i class="fa fa-lock fa-fw"></i> <strong>Locked</strong></span></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✔</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:left"><span class="text-nowrap"><i class="fa fa-umbrella fa-fw"></i> <strong>Protected</strong></span></td><td style="text-align:center">✔</td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td></tr><tr><td style="text-align:left"><span class="text-nowrap"><i class="fa fa-hand-stop-o fa-fw"></i> <strong>Private</strong></span></td><td style="text-align:center">✔</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td><td style="text-align:center">✖</td></tr></tbody></table><p><strong>只有筆記的擁有者可以更改權限</strong></p><h2 id="嵌入"><a class="header-anchor" href="#嵌入">● </a>嵌入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">src</span>=<span class="string">"https://hackmd.io/features"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="簡報模式"><a class="header-anchor" href="#簡報模式">● </a><a href="/slide-example">簡報模式</a></h2><p>您可以使用一些語法將您的筆記分成投影片<br>然後用 <strong>簡報模式</strong> <i class="fa fa-tv"></i> 來展示，詳細請至上連結</p><h2 id="書籍模式"><a class="header-anchor" href="#書籍模式">● </a><a href="/book-example">書籍模式</a></h2><p>您可以將您的筆記彙整成一本書<br>請將您的筆記連結列成清單<br>然後用 <strong>書籍模式</strong> <i class="fa fa-book"></i> 來展示，詳細請至上連結</p><h1 id="檢視"><a class="header-anchor" href="#檢視">● </a>檢視</h1><h2 id="目錄"><a class="header-anchor" href="#目錄">● </a>目錄</h2><p>在右下角有個目錄的小按鈕 <i class="fa fa-bars"></i><br>按下它會顯示目前的目錄，而且會標明你所在的區塊<br>支援到<strong>第三階段的標頭</strong></p><h2 id="永久連結"><a class="header-anchor" href="#永久連結">● </a>永久連結</h2><p>每個標頭都會在右側自動加上永久連結<br>您可以在滑到上面並且按 <i class="fa fa-chain"></i> 去移到那個錨點</p><h1 id="編輯"><a class="header-anchor" href="#編輯">● </a>編輯</h1><h2 id="快速鍵"><a class="header-anchor" href="#快速鍵">● </a>快速鍵</h2><p>跟又快又方便的Sublime text很像</p><blockquote><p>更多訊息請至 <a href="https://codemirror.net/demo/sublime.html" target="_blank" rel="noopener">這裡</a></p></blockquote><h2 id="自動完成"><a class="header-anchor" href="#自動完成">● </a>自動完成</h2><p>提供完整的 Markdown 自動完成與提示</p><ul><li><p>表情符號：輸入 <code>:</code> 顯示提示</p></li><li><p>標頭：輸入 <code>#</code> 顯示提示</p></li><li><p>參考：輸入 <code>[]</code> 顯示提示</p></li><li><p>外部：輸入 <code>{}</code> 顯示提示</p></li><li><p>圖片：輸入 <code>!</code> 顯示提示</p></li></ul><h2 id="標題"><a class="header-anchor" href="#標題">● </a>標題</h2><p>會使用 <strong>第一個第一級標頭</strong> 作為筆記標題</p><h2 id="標籤"><a class="header-anchor" href="#標籤">● </a>標籤</h2><p>如同以下方式來使用標籤，它們會顯示在您的 <strong>歷史紀錄</strong></p><h6 id="tags-功能-酷-更新"><a class="header-anchor" href="#tags-功能-酷-更新">● </a>tags: <code>功能</code> <code>酷</code> <code>更新</code></h6><h2 id="yaml-metadata"><a class="header-anchor" href="#yaml-metadata">● </a><a href="/yaml-metadata">YAML metadata</a></h2><p>提供描述筆記的資訊，以進階設定瀏覽行為，詳細請至上連結</p><ul><li>robots: 設定網路機器人 meta</li><li>lang: 設定瀏覽器顯示語言</li><li>dir: 設定文字方向</li><li>breaks: 設定是否使用分行</li><li>GA: 設定 Google Analytics</li><li>disqus: 設定 Disqus</li><li>slideOptions: 設定簡報模式的選項</li></ul><h2 id="toc"><a class="header-anchor" href="#toc">● </a>ToC:</h2><p>請使用此語法 <code>[TOC]</code> 將目錄嵌入到您的筆記之中</p><p>[TOC]</p><h2 id="表情符號"><a class="header-anchor" href="#表情符號">● </a>表情符號</h2><p>您可以像是這樣使用表情符號 😄 😃 😢 😉</p><blockquote><p>完整的表情符號列表 <a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener">在這裡</a></p></blockquote><h2 id="待辦清單"><a class="header-anchor" href="#待辦清單">● </a>待辦清單</h2><ul><li><input type="checkbox" id="checkbox0"><label for="checkbox0">待辦</label><ul><li><input type="checkbox" id="checkbox1" checked="true"><label for="checkbox1">買些沙拉</label></li><li><input type="checkbox" id="checkbox2" checked="true"><label for="checkbox2">刷牙</label></li><li><input type="checkbox" id="checkbox3"><label for="checkbox3">喝水</label></li></ul></li></ul><h2 id="程式碼區塊"><a class="header-anchor" href="#程式碼區塊">● </a>程式碼區塊</h2><p>我們支援非常多程式語言，使用自動完成來看看有些什麼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"JavaScript syntax highlighting"</span>;</span><br><span class="line">alert(s);</span><br><span class="line"><span class="function"><span class="keyword">function</span> $initHighlight(<span class="params">block, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cls.search(<span class="regexp">/\bno\-highlight\b/</span>) != <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">return</span> process(block, <span class="literal">true</span>, <span class="number">0x0F</span>) + </span><br><span class="line">             <span class="string">' class=""'</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">/* handle exception */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> / <span class="number">2</span>; i &lt; classes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkCondition(classes[i]) === <span class="literal">undefined</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/\d+[\s/]/g</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果想要 <strong>行號</strong>，在表明程式語言之後輸入 <code>=</code><br>您也可以指定開始行號，如下所示，行號從101開始</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"JavaScript syntax highlighting"</span>;</span><br><span class="line">alert(s);</span><br><span class="line"><span class="function"><span class="keyword">function</span> $initHighlight(<span class="params">block, cls</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cls.search(<span class="regexp">/\bno\-highlight\b/</span>) != <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">return</span> process(block, <span class="literal">true</span>, <span class="number">0x0F</span>) + </span><br><span class="line">             <span class="string">' class=""'</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">/* handle exception */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> / <span class="number">2</span>; i &lt; classes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (checkCondition(classes[i]) === <span class="literal">undefined</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/\d+[\s/]/g</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>或是可以接續上一個程式碼區塊的行號，使用 <code>=+</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"JavaScript syntax highlighting"</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure><h2 id="引用區塊標籤"><a class="header-anchor" href="#引用區塊標籤">● </a>引用區塊標籤</h2><blockquote><p>您可以使用以下語法，表明自己的 <strong>姓名、時間與顏色</strong> 並與其他的引用區塊做區別<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 9:59 PM] [color=#907bf7]</p><blockquote><p>也支援巢狀引用區塊喔！<br>[name=ChengHan Wu] [time=Sun, Jun 28, 2015 10:00 PM] [color=red]</p></blockquote></blockquote><h2 id="外部"><a class="header-anchor" href="#外部">● </a>外部</h2><h3 id="youtube"><a class="header-anchor" href="#youtube">● </a>Youtube</h3><div class="video-container"><iframe src="//www.youtube.com/embed/1G4isv_Fylg" frameborder="0" allowfullscreen></iframe></div><h3 id="vimeo"><a class="header-anchor" href="#vimeo">● </a>Vimeo</h3><div class="video-container"><iframe src="//player.vimeo.com/video/124148255" frameborder="0" allowfullscreen></iframe></div><h3 id="gist"><a class="header-anchor" href="#gist">● </a>Gist</h3><script src="//gist.github.com/schacon/4277.js"></script><h3 id="slideshare"><a class="header-anchor" href="#slideshare">● </a>SlideShare</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%slideshare briansolis/26-disruptive-technology-trends-2016-2018-56796196 %&#125;</span><br></pre></td></tr></table></figure><p>This is not worked!</p><h3 id="speakerdeck"><a class="header-anchor" href="#speakerdeck">● </a>Speakerdeck</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%speakerdeck sugarenia/xxlcss-how-to-scale-css-and-keep-your-sanity %&#125;</span><br></pre></td></tr></table></figure><p>This is not worked!</p><h3 id="pdf"><a class="header-anchor" href="#pdf">● </a>PDF</h3><p><strong>注意：請使用 https 的網址，否則可能會被您的瀏覽器阻擋載入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%pdf https://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf %&#125;</span><br></pre></td></tr></table></figure><p>This is not worked!</p><h2 id="mathjax"><a class="header-anchor" href="#mathjax">● </a>MathJax</h2><p>您可以使用 <strong>MathJax</strong> 語法 來產生 <em>LaTeX</em> 數學表達式，如同 <a href="http://math.stackexchange.com/" target="_blank" rel="noopener">math.stackexchange.com</a>，但是開始的 <code>$</code> 後面以及結尾的 <code>$</code> 前面不能有空白：</p><p>The <em>Gamma function</em> satisfying <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>!</mo><mspace width="1em"></mspace><mi mathvariant="normal">∀</mi><mi>n</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi></mrow><annotation encoding="application/x-tex">\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">Γ</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mrel">=</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mbin">−</span><span class="mord mathrm">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mord mspace quad"></span><span class="mord mathrm">∀</span><span class="mord mathit">n</span><span class="mrel">∈</span><span class="mord mathbb">N</span></span></span></span> is via the Euler integral</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mrow><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">x = {-b \pm \sqrt{b^2-4ac} \over 2a}.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.590389em;"></span><span class="strut bottom" style="height:2.276389em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit">x</span><span class="mrel">=</span><span class="mord displaystyle textstyle uncramped"><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">2</span><span class="mord mathit">a</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord">−</span><span class="mord mathit">b</span><span class="mbin">±</span><span class="sqrt mord"><span class="sqrt-sign" style="top:-0.07338899999999993em;"><span class="style-wrap reset-textstyle textstyle uncramped">√</span></span><span class="vlist"><span style="top:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">b</span><span class="vlist"><span style="top:-0.289em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord mathrm">4</span><span class="mord mathit">a</span><span class="mord mathit">c</span></span></span><span style="top:-0.8333889999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span><span class="reset-textstyle textstyle uncramped sqrt-line"></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:1em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span><span class="mord mathrm">.</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><msup><mi>t</mi><mrow><mi>z</mi><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi><mspace width="0.16667em"></mspace><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.36em;"></span><span class="strut bottom" style="height:2.27225em;vertical-align:-0.91225em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathrm">Γ</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mrel">=</span><span class="mop"><span class="op-symbol large-op mop" style="margin-right:0.44445em;top:-0.0011249999999999316em;">∫</span><span class="vlist"><span style="top:0.91225em;margin-left:-0.44445em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">0</span></span></span><span style="top:-0.9739999999999999em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">∞</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">t</span><span class="vlist"><span style="top:-0.41300000000000003em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mbin">−</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:-0.41300000000000003em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord">−</span><span class="mord mathit">t</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">d</span><span class="mord mathit">t</span><span class="mord mspace thinspace"></span><span class="mord mathrm">.</span></span></span></span></span></p><blockquote><p>更多關於 <strong>LaTeX</strong> 數學表達式 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">請至這裡</a></p></blockquote><h2 id="uml-圖表"><a class="header-anchor" href="#uml-圖表">● </a>UML 圖表</h2><h3 id="循序圖"><a class="header-anchor" href="#循序圖">● </a>循序圖</h3><p>您可以像是以下使用循序圖：</p><div id="sequence-0"></div><h3 id="流程圖"><a class="header-anchor" href="#流程圖">● </a>流程圖</h3><p>您可以像是以下使用流程圖：</p><div id="flowchart-0" class="flow-chart"></div><h3 id="graphviz"><a class="header-anchor" href="#graphviz">● </a>Graphviz</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">digraph hierarchy &#123;</span><br><span class="line"></span><br><span class="line">                nodesep=1.0 // increases the separation between nodes</span><br><span class="line">                </span><br><span class="line">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class="line">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class="line"></span><br><span class="line">                Headteacher-&gt;&#123;Deputy1 Deputy2 BusinessManager&#125;</span><br><span class="line">                Deputy1-&gt;&#123;Teacher1 Teacher2&#125;</span><br><span class="line">                BusinessManager-&gt;ITManager</span><br><span class="line">                &#123;rank=same;ITManager Teacher1 Teacher2&#125;  // Put them on the same level</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mermaid"><a class="header-anchor" href="#mermaid">● </a>Mermaid</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title A Gantt Diagram</span><br><span class="line"></span><br><span class="line">    section Section</span><br><span class="line">    A task           :a1, 2014-01-01, 30d</span><br><span class="line">    Another task     :after a1  , 20d</span><br><span class="line">    section Another</span><br><span class="line">    Task in sec      :2014-01-12  , 12d</span><br><span class="line">    anther task      : 24d</span><br></pre></td></tr></table></figure><h3 id="abc"><a class="header-anchor" href="#abc">● </a>Abc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">X:1</span><br><span class="line">T:Speed the Plough</span><br><span class="line">M:4/4</span><br><span class="line">C:Trad.</span><br><span class="line">K:G</span><br><span class="line">|:GABc dedB|dedB dedB|c2ec B2dB|c2A2 A2BA|</span><br><span class="line">GABc dedB|dedB dedB|c2ec B2dB|A2F2 G4:|</span><br><span class="line">|:g2gf gdBd|g2f2 e2d2|c2ec B2dB|c2A2 A2df|</span><br><span class="line">g2gf g2Bd|g2f2 e2d2|c2ec B2dB|A2F2 G4:|</span><br></pre></td></tr></table></figure><blockquote><p>更多關於 <strong>循序圖</strong> 語法 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">在這裡</a>.<br>更多關於 <strong>流程圖</strong> 語法 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">在這裡</a>.<br>更多關於 <strong>graphviz</strong> 語法 <a href="http://www.tonyballantyne.com/graphs.html" target="_blank" rel="noopener">在這裡</a><br>更多關於 <strong>mermaid</strong> 語法 <a href="http://knsv.github.io/mermaid" target="_blank" rel="noopener">在這裡</a><br>更多關於 <strong>abc</strong> 語法 <a href="http://abcnotation.com/learn" target="_blank" rel="noopener">在這裡</a></p></blockquote><h2 id="警告區塊"><a class="header-anchor" href="#警告區塊">● </a>警告區塊</h2><div class="success"><p>耶 🎉</p></div><div class="info"><p>這是訊息 📣</p></div><div class="warning"><p>注意 ⚡️</p></div><div class="danger"><p>喔不 🔥</p></div><h2 id="排版"><a class="header-anchor" href="#排版">● </a>排版</h2><h3 id="標頭"><a class="header-anchor" href="#標頭">● </a>標頭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># h1 標頭</span><br><span class="line">## h2 標頭</span><br><span class="line">### h3 標頭</span><br><span class="line">#### h4 標頭</span><br><span class="line">##### h5 標頭</span><br><span class="line">###### h6 標頭</span><br></pre></td></tr></table></figure><h3 id="水平分隔線"><a class="header-anchor" href="#水平分隔線">● </a>水平分隔線</h3><hr><hr><hr><h3 id="字形替換"><a class="header-anchor" href="#字形替換">● </a>字形替換</h3><p>© © ® ® ™ ™ § § ±</p><p>測試… 測試… 測試… 測試?.. 測試!..</p><p>!!! ??? ,</p><p>Remarkable – awesome</p><p>“Smartypants, 雙引號”</p><p>‘Smartypants, 單引號’</p><h3 id="強調"><a class="header-anchor" href="#強調">● </a>強調</h3><p><strong>這是粗體文字</strong></p><p><strong>這是粗體文字</strong></p><p><em>這是斜體文字</em></p><p><em>這是斜體文字</em></p><p><s>這是刪除文字</s></p><p>上標： 19<sup>th</sup></p><p>下標： H<sub>2</sub>O</p><p><ins>這是底線文字</ins></p><p><mark>這是標記文字</mark></p><h3 id="引用區塊"><a class="header-anchor" href="#引用區塊">● </a>引用區塊</h3><blockquote><p>引用區塊也可以是巢狀的喔…</p><blockquote><p>…可以多層次的使用…</p><blockquote><p>…或是用空白隔開</p></blockquote></blockquote></blockquote><h3 id="清單"><a class="header-anchor" href="#清單">● </a>清單</h3><h4 id="項目"><a class="header-anchor" href="#項目">● </a>項目</h4><ul><li>在行開頭使用 <code>+</code> <code>-</code> 或是 <code>*</code> 來建立清單</li><li>空兩個空白就可以產生子清單<ul><li>當清單標記使用的字元不同，會強制建立新的清單<ul><li>Ac tristique libero volutpat at</li></ul><ul><li>Facilisis in pretium nisl aliquet</li></ul><ul><li>Nulla volutpat aliquam velit</li></ul></li></ul></li><li>非常簡單！</li></ul><h4 id="編號"><a class="header-anchor" href="#編號">● </a>編號</h4><ol><li><p>Lorem ipsum dolor sit amet</p></li><li><p>Consectetur adipiscing elit</p></li><li><p>Integer molestie lorem at massa</p></li><li><p>您可以逐次增加項目數字…</p></li><li><p>…或是全部都使用 <code>1.</code></p></li><li><p>feafw</p></li><li><p>332</p></li><li><p>242</p></li><li><p>2552</p></li><li><p>e2</p></li></ol><p>從其他範圍開始編號清單</p><ol start="57"><li>foo</li><li>bar</li></ol><h3 id="程式碼"><a class="header-anchor" href="#程式碼">● </a>程式碼</h3><p>行內 <code>程式碼</code></p><p>縮排程式碼</p><pre><code>// Some commentsline 1 of codeline 2 of codeline 3 of code</code></pre><p>程式碼區塊</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sample text here...</span><br></pre></td></tr></table></figure><p>語法標色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bar++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><h3 id="表格"><a class="header-anchor" href="#表格">● </a>表格</h3><table><thead><tr><th>選項</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>path to data files to supply the data that will be passed into templates.</td></tr><tr><td>engine</td><td>engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td>ext</td><td>extension to be used for dest files.</td></tr></tbody></table><p>向右對齊</p><table><thead><tr><th style="text-align:right">選項</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td style="text-align:right">data</td><td style="text-align:right">path to data files to supply the data that will be passed into templates.</td></tr><tr><td style="text-align:right">engine</td><td style="text-align:right">engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td style="text-align:right">ext</td><td style="text-align:right">extension to be used for dest files.</td></tr></tbody></table><p>向左對齊</p><table><thead><tr><th style="text-align:left">選項</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">data</td><td style="text-align:left">path to data files to supply the data that will be passed into templates.</td></tr><tr><td style="text-align:left">engine</td><td style="text-align:left">engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td style="text-align:left">ext</td><td style="text-align:left">extension to be used for dest files.</td></tr></tbody></table><p>置中對齊</p><table><thead><tr><th style="text-align:center">選項</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">data</td><td style="text-align:center">path to data files to supply the data that will be passed into templates.</td></tr><tr><td style="text-align:center">engine</td><td style="text-align:center">engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td style="text-align:center">ext</td><td style="text-align:center">extension to be used for dest files.</td></tr></tbody></table><h3 id="連結"><a class="header-anchor" href="#連結">● </a>連結</h3><p><a href="http://dev.nodeca.com" target="_blank" rel="noopener">連結文字</a><br><a href="http://nodeca.github.io/pica/demo/" title="標題文字！" target="_blank" rel="noopener">加上標題的連結文字</a><br>自動轉換連結 <a href="https://github.com/nodeca/pica" target="_blank" rel="noopener">https://github.com/nodeca/pica</a></p><h3 id="圖片"><a class="header-anchor" href="#圖片">● </a>圖片</h3><p><img src="https://octodex.github.com/images/minion.png" alt="Minion"><br><img src="https://octodex.github.com/images/stormtroopocat.jpg" alt="Stormtroopocat" title="The Stormtroopocat"><br>如同連結一般，圖片也可以用註腳語法<br><img src="https://octodex.github.com/images/dojocat.jpg" alt="Alt text" title="The Dojocat"><br>使用參考，可以在稍後的文件中再定義圖片網址</p><p><img src="https://octodex.github.com/images/minion.png" alt="Minion" width="200" height="200"><br>使用指定的大小顯示圖片</p><h3 id="註腳"><a class="header-anchor" href="#註腳">● </a>註腳</h3><p>註腳 1 連結<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.<br>註腳 2 連結<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.<br>行內註腳<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> 定義<br>重複的註腳參考<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2:1]</a></sup>.</p><h3 id="定義清單"><a class="header-anchor" href="#定義清單">● </a>定義清單</h3><dl><dt>名詞 1</dt><dd><p>定義 1 快速連續項目</p></dd><dt>名詞 2 加上 <em>行內標記</em></dt><dd><p>定義 2</p><pre><code>  { 這些程式碼屬於 定義 2 的一部分 }</code></pre><p>定義 2 的第三段落</p></dd></dl><p><em>緊密樣式：</em></p><dl><dt>名詞 1</dt><dd>定義 1</dd><dt>名詞 2</dt><dd>定義 2a</dd><dd>定義 2b</dd></dl><h3 id="縮寫"><a class="header-anchor" href="#縮寫">● </a>縮寫</h3><p>這是 <abbr title="Hyper Text Markup Language">HTML</abbr> 的縮寫範例<br>它會轉換 “<abbr title="Hyper Text Markup Language">HTML</abbr>”，但是縮寫旁邊其他的部分，例如：“xxxHTMLyyy”，不受影響</p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 開始e=>end: 結束op=>operation: 我的操作op2=>operation: 啦啦啦cond=>condition: 是或否？st->op->op2->condcond(yes)->econd(no)->op2</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">艾莉絲->包柏: 哈摟，你好嗎？Note right of 包柏: 包柏思考中包柏-->艾莉絲: 我很好，謝謝！Note left of 艾莉絲: 艾莉絲回應艾莉絲->包柏: 最近過得怎樣？</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>註腳 <strong>也可以標記</strong><br>還可以有很多段落 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>註腳 文字 <a href="#fnref2" class="footnote-backref">↩︎</a> <a href="#fnref2:1" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>行內註腳的文字 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
